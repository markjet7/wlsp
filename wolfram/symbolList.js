[
	{
		"name":"MRF%20TEA%20LCA%20Slide%20Images",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl\"",
		"children":[
			{
				"name":"seattle",
				"kind":"List",
				"definition":"seattle = {17.8,49.8,0.6, 1.1,2.1,2.1,1.6,0.9,17.4,6.6}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":1,
							"character":0
						},
						"end":{
							"line":1,
							"character":55
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[seattle]",
				"icon":"symbol-array",
				"collapsibleState":1
			},
			{
				"name":"epa",
				"kind":"List",
				"definition":"epa = {39.8,28.8,5.4,3.1,3.7,0.0,3.8,2.6,12.8,0.01}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":2,
							"character":0
						},
						"end":{
							"line":2,
							"character":51
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[epa]",
				"icon":"symbol-array",
				"collapsibleState":1
			},
			{
				"name":"oregon",
				"kind":"List",
				"definition":"oregon = {18.3,64.8,0.4,2.3,2.3,1.6,2.1,2.4,0,5.8}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":3,
							"character":0
						},
						"end":{
							"line":3,
							"character":50
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[oregon]",
				"icon":"symbol-array",
				"collapsibleState":1
			},
			{
				"name":"pa",
				"kind":"List",
				"definition":"pa = {1.4,57.6,0.0,6.9,5.0,0.0,5.6,2.2,21.4,0}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":4,
							"character":0
						},
						"end":{
							"line":4,
							"character":46
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[pa]",
				"icon":"symbol-array",
				"collapsibleState":1
			},
			{
				"name":"EPAelect",
				"kind":"List",
				"definition":"EPAelect = {1.03060906,0.852336,0.14742,0.993426,0.358974,0,0.361228,0.295074,2.14910976,0}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":42,
							"character":0
						},
						"end":{
							"line":42,
							"character":91
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[EPAelect]",
				"icon":"symbol-array",
				"collapsibleState":1
			},
			{
				"name":"seattleelect",
				"kind":"List",
				"definition":"seattleelect = {0.46092566,1.473831,0.01638,\n0.352506,\n0.203742,\n0,\n0.152096,0.102141,2.92144608,0}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":43,
							"character":0
						},
						"end":{
							"line":47,
							"character":31
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[seattleelect]",
				"icon":"symbol-array",
				"collapsibleState":1
			},
			{
				"name":"oregonelect",
				"kind":"Symbol",
				"definition":"oregonelect = {0.47387301,1.917756,0.01092,0.737058,0.223146,0,0.199626,0.272376,0,0}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":48,
							"character":0
						},
						"end":{
							"line":48,
							"character":85
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[oregonelect]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"paelect",
				"kind":"Symbol",
				"definition":"paelect = {0.03625258,1.704672,0,2.211174,0.4851,0,0.532336,0.249678,3.59304288,0}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":49,
							"character":0
						},
						"end":{
							"line":49,
							"character":82
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[paelect]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"equipmentCosts",
				"kind":"Symbol",
				"definition":"equipmentCosts = <|\"Recycling Magnet\"->35694.49196,\n\"Eddy Current Separator\"->130539.8563,\n\"Conveyor\"->140738.2826,\n\"Metering Bin\"->152976.3941,\n\"OCC Screen\"->178472.4598,\n\"Debris Roll Screen\"->224365.378,\n\"Optical PET Sorter\"->229464.5912,\n\"Polishing Screen\"->285555.9357,\n\"Rolling Stock\"->356944.9196,\n\"Newspaper Screen\"->407937.051,\n\"Optical HDPE\"->458929.1823,\n\"2-Way Baler\"->540516.5925,\n\"1-Way Baler\"->560913.4451,\n\"Optical Glass Sorter\"->841370.1676|>",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":67,
							"character":0
						},
						"end":{
							"line":80,
							"character":37
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[equipmentCosts]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"revenues",
				"kind":"Symbol",
				"definition":"revenues = {\n  {-0.06401616000000031,\n  8.258214507057899,\n  3.570246285408,\n  3.64006122637248,\n  3.3756123338582396,\n  1.8705870191080798,\n  0.0,\n  0.9384479999999998,\n  5.1708541718184,\n  0.338423384064},\n    {-0.36253583999999983,\n  3.693372317226901,\n  6.173550868517999,\n  0.40445124737472,\n  1.1977979249174402,\n  1.06168452435864,\n  0.0,\n  0.395136,\n  1.7899110594755998,\n  0.46004428771199996},\n {-0.33633191999999973,\n  3.7971187306321497,\n  8.033054142167998,\n  0.26963416491648,\n  2.50448657028192,\n  1.1627973362023198,\n  0.0,\n  0.518616,\n  4.7730961586016,\n  0.0},\n {-0.05338127999999997,\n  0.29048995753469997,\n  7.140492570816,\n  0.0,\n  7.51345971084576,\n  2.527820296092,\n  0.0,\n  1.382976,\n  4.3753381453847995,\n  0.5658015952319999}\n}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":92,
							"character":0
						},
						"end":{
							"line":133,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[revenues]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"wasteRevLeg",
				"kind":"Symbol",
				"definition":"wasteRevLeg = {\"Residue\",\"OCC\", \"Non-OCC Fiber\", \"Plastic Film\",\n         \"HDPE\", \"PET\", \"Mixed Plastics\", \"Fe\", \"Al\", \"Glass\"}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":135,
							"character":0
						},
						"end":{
							"line":136,
							"character":62
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[wasteRevLeg]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"sensitivity",
				"kind":"Symbol",
				"definition":"sensitivity = ImportString[\"(59.11536305780566, 59.028985673146096, 59.072174365475895, 'Electricity', 0), (59.16126043958978, 58.98308829136197, 59.072174365475895, 'Waste Disposal Cost', 1), (59.165835342047814, 58.97851338890398, 59.072174365475895, 'Diesel Consumption', 2), (59.412697200620514, 58.731651530331256, 59.072174365475895, 'Baling Wire Cost', 3), (65.22424153793199, 52.920107193019774, 59.072174365475895, 'MPW Tipping Fee', 4), (65.47018427262805, 52.67416445832369, 59.072174365475895, 'Total Fixed Capital Cost', 5), (28.240106148620015, 89.69992888124493, 59.072174365475895, 'Facility Capacity', 6)\", \"PythonExpression\"]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":156,
							"character":0
						},
						"end":{
							"line":156,
							"character":643
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[sensitivity]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"s2",
				"kind":"Symbol",
				"definition":"s2 = sensitivity[[All, {1, 2}]] - sensitivity[[All, 3]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":158,
							"character":0
						},
						"end":{
							"line":158,
							"character":55
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[s2]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"sensitivityComp",
				"kind":"Symbol",
				"definition":"sensitivityComp = ImportString[\n    \"[(58.98637967896379, 58.98637967896379, 58.98637967896379, 'Mixed Plastics', 0), (57.66092601351723, 60.311833344410374, 58.98637967896379, 'Glass', 1), (57.45622065317005, 60.51653870475756, 58.98637967896379, 'Fe', 2), (56.17873343618016, 61.794025921747476, 58.98637967896379, 'PET', 3), (54.1174749278381, 63.855284430089505, 58.98637967896379, 'HDPE', 4), (53.643658466843306, 64.32910089108432, 58.98637967896379, 'Plastic Film', 5), (52.187322658897266, 65.7854366990304, 58.98637967896379, 'Non-OCC Fiber', 6), (51.65047046566674, 66.3222888922609, 58.98637967896379, 'Al', 7), (44.94630649066344, 73.02645286726417, 58.98637967896379, 'OCC', 8)]\",\n    \"PythonExpression\"\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":179,
							"character":0
						},
						"end":{
							"line":182,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[sensitivityComp]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"s2",
				"kind":"Symbol",
				"definition":"s2 = sensitivityComp[[All, {1, 2}]] - sensitivityComp[[All, 3]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":184,
							"character":0
						},
						"end":{
							"line":184,
							"character":63
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[s2]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"ghg",
				"kind":"Symbol",
				"definition":"ghg = {7.203331946970879, 6.863991903705509, 5.984973719287869, 8.509319131054626}",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":205,
							"character":0
						},
						"end":{
							"line":205,
							"character":82
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[ghg]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"s2",
				"kind":"Symbol",
				"definition":"s2 = sensGhg[[All, {1, 2}]] - sensGhg[[All, 3]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":217,
							"character":0
						},
						"end":{
							"line":217,
							"character":47
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[s2]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"lca",
				"kind":"Symbol",
				"definition":"lca = ImportString[\"0 'US (EPA)' Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\n1      GWP     50.1377                       2.86777     4.01107  42.9834\n2      ODP     72.0934                      0.468552     6.05673  21.3813\n3       AP     33.4028                       2.24384     1.82779  62.5256\n4      ETP     86.0766                      0.569607      4.2754  9.07844\n5       EP     23.6695                       2.02451     1.98693  72.3191\n6       PO     20.9323                       1.26608     1.76633  76.0353\n7        C     83.5597                          3.09     3.25628   10.094\n8       NC     78.4321                      0.550868      9.9524  11.0646\n0 Seattle Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\n1     GWP     48.9036                       3.00955     2.97841  45.1084\n2     ODP     71.9402                      0.503053     4.60111  22.9557\n3      AP     31.9702                       2.31066      1.3318  64.3874\n4     ETP     86.3253                      0.614623     3.26422  9.79591\n5      EP     22.5059                       2.07113     1.43827  73.9847\n6      PO      19.851                       1.29184     1.27522   77.582\n7       C     83.3733                       3.31718     2.47344  10.8361\n8      NC     79.6215                      0.601679     7.69155  12.0852\n0 Oregon Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\n1    GWP     58.0016                       2.42763     3.18433  36.3865\n2    ODP     78.1598                      0.371714     4.50619  16.9623\n3     AP     40.7092                       2.00109     1.52869  55.7611\n4    ETP     89.5973                      0.433859     3.05401  6.91488\n5     EP     29.7977                       1.86499     1.71656  66.6208\n6     PO     26.5942                       1.17706     1.54002  70.6887\n7      C     87.5505                        2.3691     2.34135  7.73906\n8     NC     83.6505                      0.429919     7.28427  8.63527\n0 Pennsylvania Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\n1          GWP     40.5046                       3.45156     4.31025  51.7336\n2          ODP     63.9682                       0.61938     7.14842   28.264\n3           AP     25.2423                       2.52622     1.83729  70.3941\n4          ETP     81.0993                      0.799537     5.35811  12.7431\n5           EP     17.2681                       2.20043     1.92815  78.6033\n6           PO     15.1194                       1.36243     1.69705  81.8211\n7            C     77.7063                       4.28103     4.02795  13.9847\n8           NC     71.9724                      0.753097      12.148  15.1266\", \"Table\", \nTextDelimiters ->\"'\"]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":264,
							"character":0
						},
						"end":{
							"line":300,
							"character":21
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[lca]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"lca2",
				"kind":"Symbol",
				"definition":"lca2 = ArrayReshape[Flatten[lca], {4, 9, 6}]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":302,
							"character":0
						},
						"end":{
							"line":302,
							"character":44
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[lca2]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"lcaComp",
				"kind":"Symbol",
				"definition":"lcaComp = ImportString[\"\tImpact Category\tUS (EPA)\tSeattle\tOregon\tPennsylvania\n0\tGWP (kg CO2-Eq)\t100\t95.034472\t82.892164\t118.130321\n1\tODP (kg CFC-11-Eq)\t100\t92.757100\t75.355524\t126.051757\n2\tAP (moles of H+-Eq)\t100\t96.992425\t88.733759\t112.131292\n3\tETP (kg 2,4-D-Eq)\t100\t92.404405\t71.035301\t131.288513\n4\tEP (kg N)\t100\t97.622604\t91.909059\t108.553323\n5\tPO (kg NOx-Eq)\t100\t97.894266\t92.843288\t107.563624\n6\tCa (kg benzene-Eq)\t100\t92.944725\t72.021276\t130.429251\n7\tNCa (kg toluene-Eq)\t100\t90.923277\t72.665633\t128.133174\", \"TSV\"]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl",
					"range":{
						"start":{
							"line":313,
							"character":0
						},
						"end":{
							"line":321,
							"character":65
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[lcaComp]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"\\nseattle = {17.8,49.8,0.6, 1.1,2.1,2.1,1.6,0.9,17.4,6.6}\\nepa = {39.8,28.8,5.4,3.1,3.7,0.0,3.8,2.6,12.8,0.01}\\noregon = {18.3,64.8,0.4,2.3,2.3,1.6,2.1,2.4,0,5.8}\\npa = {1.4,57.6,0.0,6.9,5.0,0.0,5.6,2.2,21.4,0}\\n\\n\\n\\ncomposition = {\\\"US (EPA)\\\",\\\"Seattle\\\", \\\"Oregon\\\",\\\"Pennsylvania\\\"};\\nwastes = {\\\"OCC\\\", \\\"Non-OCC Fiber\\\", \\\"Plastic Film\\\",\\\"HDPE\\\", \\\"PET\\\", \\\"Mixed Plastics\\\", \\\"Fe\\\", \\\"Al\\\", \\\"Glass\\\", \\\"Residue\\\"};\\n\\nplots = {};\\n\\nBarChart[\\n    {\\n        epa, \\n        seattle,\\n        oregon,\\n        pa\\n    },\\n    ChartStyle -> 4,\\n    ChartLayout -> \\\"Percentile\\\",\\n    ChartLegends -> wastes,\\n    ChartLabels -> {composition,None},\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"% of Waste\\\"}\\n] \/\/ \\n    AppendTo[plots,\\n     #] &\\n\\nprices = {22.046, 99.2079,104.71945,173.613825,210, 429.9014109, 617.2943336, 925.9415004, 1708.582531};\\n\\nBarChart[\\n    prices,\\n    ChartStyle -> 4,\\n    ChartLabels -> {None,{\\\"Glass\\\",\\\"Mixed Plastics\\\",\\\"Non-OCC Fiber\\\",\\\"OCC\\\",\\\"Fe\\\",\\\"PET\\\",\\\"Plastic Film\\\",\\\"HDPE\\\",\\\"Al\\\"}},\\n    BarOrigin -> Left,\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Price ($\/kg)\\\"}\\n] \/\/ AppendTo[plots, #] &\\n\\n(* electricity *)\\nEPAelect = {1.03060906,0.852336,0.14742,0.993426,0.358974,0,0.361228,0.295074,2.14910976,0}\\nseattleelect = {0.46092566,1.473831,0.01638,\\n0.352506,\\n0.203742,\\n0,\\n0.152096,0.102141,2.92144608,0}\\noregonelect = {0.47387301,1.917756,0.01092,0.737058,0.223146,0,0.199626,0.272376,0,0}\\npaelect = {0.03625258,1.704672,0,2.211174,0.4851,0,0.532336,0.249678,3.59304288,0}\\n\\nBarChart[\\n    {\\n        EPAelect, \\n        seattleelect,\\n        oregonelect,\\n        paelect\\n    },\\n    ChartStyle -> 4,\\n    ChartLayout -> \\\"Stacked\\\",\\n    ChartLegends -> wastes,\\n    ChartLabels -> {composition,None},\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Electricity Consumption (kWh\/MT)\\\"}\\n] \/\/ AppendTo[plots, #] &\\n\\n(* equipment costs *)\\nequipmentCosts = <|\\\"Recycling Magnet\\\"->35694.49196,\\n\\\"Eddy Current Separator\\\"->130539.8563,\\n\\\"Conveyor\\\"->140738.2826,\\n\\\"Metering Bin\\\"->152976.3941,\\n\\\"OCC Screen\\\"->178472.4598,\\n\\\"Debris Roll Screen\\\"->224365.378,\\n\\\"Optical PET Sorter\\\"->229464.5912,\\n\\\"Polishing Screen\\\"->285555.9357,\\n\\\"Rolling Stock\\\"->356944.9196,\\n\\\"Newspaper Screen\\\"->407937.051,\\n\\\"Optical HDPE\\\"->458929.1823,\\n\\\"2-Way Baler\\\"->540516.5925,\\n\\\"1-Way Baler\\\"->560913.4451,\\n\\\"Optical Glass Sorter\\\"->841370.1676|>\\n\\nBarChart[\\n    equipmentCosts,\\n    ChartStyle -> 4,\\n    ChartLabels -> Callout[Keys@equipmentCosts, Automatic],\\n    ChartLayout -> \\\"Stacked\\\",\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Equipment Cost ($MM)\\\"}\\n] \/\/ AppendTo[plots, #] &\\n\\n(* Revenues *)\\nrevenues = {\\n  {-0.06401616000000031,\\n  8.258214507057899,\\n  3.570246285408,\\n  3.64006122637248,\\n  3.3756123338582396,\\n  1.8705870191080798,\\n  0.0,\\n  0.9384479999999998,\\n  5.1708541718184,\\n  0.338423384064},\\n    {-0.36253583999999983,\\n  3.693372317226901,\\n  6.173550868517999,\\n  0.40445124737472,\\n  1.1977979249174402,\\n  1.06168452435864,\\n  0.0,\\n  0.395136,\\n  1.7899110594755998,\\n  0.46004428771199996},\\n {-0.33633191999999973,\\n  3.7971187306321497,\\n  8.033054142167998,\\n  0.26963416491648,\\n  2.50448657028192,\\n  1.1627973362023198,\\n  0.0,\\n  0.518616,\\n  4.7730961586016,\\n  0.0},\\n {-0.05338127999999997,\\n  0.29048995753469997,\\n  7.140492570816,\\n  0.0,\\n  7.51345971084576,\\n  2.527820296092,\\n  0.0,\\n  1.382976,\\n  4.3753381453847995,\\n  0.5658015952319999}\\n}\\n\\nwasteRevLeg = {\\\"Residue\\\",\\\"OCC\\\", \\\"Non-OCC Fiber\\\", \\\"Plastic Film\\\",\\n         \\\"HDPE\\\", \\\"PET\\\", \\\"Mixed Plastics\\\", \\\"Fe\\\", \\\"Al\\\", \\\"Glass\\\"}\\nBarChart[\\n    revenues,\\n    ChartStyle -> 4,\\n    ChartLayout -> \\\"Stacked\\\",\\n    ChartLabels -> {composition, None},\\n    ChartLegends -> wasteRevLeg,\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Revenue ($MM)\\\"}\\n] \/\/ AppendTo[plots, #] &\\n\\nBarChart[\\n    {59.00513607703033, 3.4795574795548276, 30.49378845177501, 43.394593478146255},\\n    ChartStyle -> 4,\\n    ChartLabels -> Placed[composition, Below],\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Net Present Value ($MM)\\\"}\\n] \/\/ AppendTo[plots, #] &\\n\\n\\nsensitivity = ImportString[\\\"(59.11536305780566, 59.028985673146096, 59.072174365475895, 'Electricity', 0), (59.16126043958978, 58.98308829136197, 59.072174365475895, 'Waste Disposal Cost', 1), (59.165835342047814, 58.97851338890398, 59.072174365475895, 'Diesel Consumption', 2), (59.412697200620514, 58.731651530331256, 59.072174365475895, 'Baling Wire Cost', 3), (65.22424153793199, 52.920107193019774, 59.072174365475895, 'MPW Tipping Fee', 4), (65.47018427262805, 52.67416445832369, 59.072174365475895, 'Total Fixed Capital Cost', 5), (28.240106148620015, 89.69992888124493, 59.072174365475895, 'Facility Capacity', 6)\\\", \\\"PythonExpression\\\"]\\n\\ns2 = sensitivity[[All, {1, 2}]] - sensitivity[[All, 3]]\\n\\nBarChart[\\n    s2,\\n    ChartLayout -> Stacked,\\n    ChartLabels -> {Placed[sensitivity[[All, 4]], Axis], None},\\n    BarOrigin -> Left,\\n    ChartStyle -> {Gray, Black},\\n    Frame -> True,\\n    PlotLabel -> \\\"US (EPA) MRF Sensitivity Analysis\\\",\\n    ChartLegends -> Placed[{\\\"+30%\\\", \\\"-30%\\\"}, Scaled[{0.9, 0.1}]],\\n    FrameLabel -> {None, \\\"Net Present Value ($MM)\\\"},\\n    FrameTicks -> {\\n        {Automatic, None},\\n        {\\n            Table[{r, Round[r+sensitivity[[1, 3]],10]}, {r, Range[-90, 90, 10]}],\\n            None\\n        }\\n    }\\n] \/\/ AppendTo[plots, #] &\\n\\nsensitivityComp = ImportString[\\n    \\\"[(58.98637967896379, 58.98637967896379, 58.98637967896379, 'Mixed Plastics', 0), (57.66092601351723, 60.311833344410374, 58.98637967896379, 'Glass', 1), (57.45622065317005, 60.51653870475756, 58.98637967896379, 'Fe', 2), (56.17873343618016, 61.794025921747476, 58.98637967896379, 'PET', 3), (54.1174749278381, 63.855284430089505, 58.98637967896379, 'HDPE', 4), (53.643658466843306, 64.32910089108432, 58.98637967896379, 'Plastic Film', 5), (52.187322658897266, 65.7854366990304, 58.98637967896379, 'Non-OCC Fiber', 6), (51.65047046566674, 66.3222888922609, 58.98637967896379, 'Al', 7), (44.94630649066344, 73.02645286726417, 58.98637967896379, 'OCC', 8)]\\\",\\n    \\\"PythonExpression\\\"\\n]\\n\\ns2 = sensitivityComp[[All, {1, 2}]] - sensitivityComp[[All, 3]]\\n\\nBarChart[\\n    s2,\\n    ChartLayout -> Stacked,\\n    ChartLabels -> {Placed[sensitivityComp[[All, 4]], Axis], None},\\n    BarOrigin -> Left,\\n    ChartStyle -> {Gray, Black},\\n    Frame -> True,\\n    PlotLabel -> \\\"US (EPA) MRF Composition\\\\nSensitivity Analysis\\\",\\n    ChartLegends -> Placed[{\\\"+30%\\\", \\\"-30%\\\"}, Scaled[{0.9, 0.1}]],\\n    FrameLabel -> {None, \\\"Net Present Value ($MM)\\\"},\\n    FrameTicks -> {\\n        {Automatic, None},\\n        {\\n            Table[{r, Round[r+sensitivityComp[[1, 3]],10]}, {r, Range[-90, 90, 10]}],\\n            None\\n        }\\n    }\\n] \/\/ AppendTo[plots, #] &\\n\\nghg = {7.203331946970879, 6.863991903705509, 5.984973719287869, 8.509319131054626}\\n\\nBarChart[\\n    ghg,\\n    ChartStyle -> 4,\\n    ChartLabels -> Placed[composition, Below],\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"GHG Emissions (kg CO2e\/MT)\\\"}\\n] \\n\\nsensGhg = ImportString[\\\"[(7.141359446970879, 7.26530444697088, 7.203331946970879, 'Collection Distance', 0), (7.116652822708456, 7.2900110712333035, 7.203331946970879, 'Baling Wire', 1), (6.274459946970879, 8.13220394697088, 7.203331946970879, 'Diesel Consumption', 2), (6.1198559871420395, 8.28680790679972, 7.203331946970879, 'Electricity', 3)]\\\", \\\"PythonExpression\\\"];\\n\\ns2 = sensGhg[[All, {1, 2}]] - sensGhg[[All, 3]]\\n\\nBarChart[\\n    s2,\\n    ChartLayout -> Stacked,\\n    ChartLabels -> {Placed[sensGhg[[All, 4]], Axis], None},\\n    BarOrigin -> Left,\\n    ChartStyle -> {Gray, Black},\\n    Frame -> True,\\n    PlotLabel -> \\\"US (EPA) Greenhouse Gas\\\\nSensitivity Analysis\\\",\\n    ChartLegends -> Placed[{\\\"+30%\\\", \\\"-30%\\\"}, Scaled[{0.9, 0.1}]],\\n    FrameLabel -> {None, \\\"Net Present Value ($MM)\\\"},\\n    FrameTicks -> {\\n        {Automatic, None},\\n        {\\n            Table[{r, Round[r+sensGhg[[1, 3]],0.5]}, {r, Range[-10, 10, 0.5]}],\\n            None\\n        }\\n    }\\n] \/\/ AppendTo[plots, #] &\\n\\nsensGhgComp = ImportString[\\\"[(7.203331946970879, 7.203331946970879, 7.203331946970879, 'Mixed Plastics', 0), (7.168010987635425, 7.238652906306335, 7.203331946970879, 'Plastic Film', 1), (7.1514370137112895, 7.25522688023047, 7.203331946970879, 'Al', 2), (7.142404791297407, 7.264259102644353, 7.203331946970879, 'Fe', 3), (7.139399038674837, 7.267264855266921, 7.203331946970879, 'PET', 4), (7.057223660029146, 7.349440233912613, 7.203331946970879, 'Non-OCC Fiber', 5), (7.04492352894944, 7.36174036499232, 7.203331946970879, 'HDPE', 6), (7.021884215900471, 7.384779678041289, 7.203331946970879, 'OCC', 7), (6.878038395477759, 7.528625498463999, 7.203331946970879, 'Glass', 8)]\\\", \\\"PythonExpression\\\"];\\n\\n\\ns2 = sensGhgComp[[All, {1, 2}]] - sensGhgComp[[All, 3]];\\n\\nBarChart[\\n    s2,\\n    ChartLayout -> Stacked,\\n    ChartLabels -> {Placed[sensGhgComp[[All, 4]], Axis], None},\\n    BarOrigin -> Left,\\n    ChartStyle -> {Gray, Black},\\n    Frame -> True,\\n    PlotLabel -> \\\"US (EPA) Greenhouse Gas\\\\nComposition Sensitivity Analysis\\\",\\n    ChartLegends -> Placed[{\\\"+30%\\\", \\\"-30%\\\"}, Scaled[{0.9, 0.1}]],\\n    FrameLabel -> {None, \\\"Net Present Value ($MM)\\\"},\\n    FrameTicks -> {\\n        {Automatic, None},\\n        {\\n            Table[{r, Round[r+sensGhgComp[[1, 3]],0.1]}, {r, Range[-10, 10, 0.1]}],\\n            None\\n        }\\n    }\\n];\\n\\n(* LCA *)\\n\\nlca = ImportString[\\\"0 'US (EPA)' Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\\n1      GWP     50.1377                       2.86777     4.01107  42.9834\\n2      ODP     72.0934                      0.468552     6.05673  21.3813\\n3       AP     33.4028                       2.24384     1.82779  62.5256\\n4      ETP     86.0766                      0.569607      4.2754  9.07844\\n5       EP     23.6695                       2.02451     1.98693  72.3191\\n6       PO     20.9323                       1.26608     1.76633  76.0353\\n7        C     83.5597                          3.09     3.25628   10.094\\n8       NC     78.4321                      0.550868      9.9524  11.0646\\n0 Seattle Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\\n1     GWP     48.9036                       3.00955     2.97841  45.1084\\n2     ODP     71.9402                      0.503053     4.60111  22.9557\\n3      AP     31.9702                       2.31066      1.3318  64.3874\\n4     ETP     86.3253                      0.614623     3.26422  9.79591\\n5      EP     22.5059                       2.07113     1.43827  73.9847\\n6      PO      19.851                       1.29184     1.27522   77.582\\n7       C     83.3733                       3.31718     2.47344  10.8361\\n8      NC     79.6215                      0.601679     7.69155  12.0852\\n0 Oregon Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\\n1    GWP     58.0016                       2.42763     3.18433  36.3865\\n2    ODP     78.1598                      0.371714     4.50619  16.9623\\n3     AP     40.7092                       2.00109     1.52869  55.7611\\n4    ETP     89.5973                      0.433859     3.05401  6.91488\\n5     EP     29.7977                       1.86499     1.71656  66.6208\\n6     PO     26.5942                       1.17706     1.54002  70.6887\\n7      C     87.5505                        2.3691     2.34135  7.73906\\n8     NC     83.6505                      0.429919     7.28427  8.63527\\n0 Pennsylvania Electricity 'Collection and Transportation' 'Baling Wire'   Diesel\\n1          GWP     40.5046                       3.45156     4.31025  51.7336\\n2          ODP     63.9682                       0.61938     7.14842   28.264\\n3           AP     25.2423                       2.52622     1.83729  70.3941\\n4          ETP     81.0993                      0.799537     5.35811  12.7431\\n5           EP     17.2681                       2.20043     1.92815  78.6033\\n6           PO     15.1194                       1.36243     1.69705  81.8211\\n7            C     77.7063                       4.28103     4.02795  13.9847\\n8           NC     71.9724                      0.753097      12.148  15.1266\\\", \\\"Table\\\", \\nTextDelimiters ->\\\"'\\\"]\\n\\nlca2 = ArrayReshape[Flatten[lca], {4, 9, 6}]\\n\\nBarChart[\\n    lca2[[1, 2;;, 3;;]],\\n    ChartLayout -> Stacked,\\n    ChartLabels -> {Placed[lca2[[1, 2;;, 2]], Axis], None},\\n    ChartLegends -> lca2[[1, 1,3;;]],\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"% Contribution to Environmental Impact\\\"}\\n] \/\/ AppendTo[plots, #] &\\n\\nlcaComp = ImportString[\\\"\\tImpact Category\\tUS (EPA)\\tSeattle\\tOregon\\tPennsylvania\\n0\\tGWP (kg CO2-Eq)\\t100\\t95.034472\\t82.892164\\t118.130321\\n1\\tODP (kg CFC-11-Eq)\\t100\\t92.757100\\t75.355524\\t126.051757\\n2\\tAP (moles of H+-Eq)\\t100\\t96.992425\\t88.733759\\t112.131292\\n3\\tETP (kg 2,4-D-Eq)\\t100\\t92.404405\\t71.035301\\t131.288513\\n4\\tEP (kg N)\\t100\\t97.622604\\t91.909059\\t108.553323\\n5\\tPO (kg NOx-Eq)\\t100\\t97.894266\\t92.843288\\t107.563624\\n6\\tCa (kg benzene-Eq)\\t100\\t92.944725\\t72.021276\\t130.429251\\n7\\tNCa (kg toluene-Eq)\\t100\\t90.923277\\t72.665633\\t128.133174\\\", \\\"TSV\\\"]\\n\\nBarChart[\\n    lcaComp[[2;;, 3;;]],\\n    ChartLegends -> {\\n        lcaComp[[1, 3;;]]\\n    },\\n    BarOrigin -> Left,\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Normalized Environmental Impacts\\\"},\\n    ChartLabels -> {Placed[lcaComp[[2;;, 2]], Axis],None},\\n    GridLines -> Automatic\\n] \/\/ AppendTo[plots, #] &\\n\\nMapIndexed[\\n    Export[\\n        FileNameJoin[{NotebookDirectory[], \\\"plots_\\\" <> ToString[#2[[1]]] <> \\\".jpg\\\"}],\\n        #1\\n    ] &, \\n    plots]\\n\\n\\n\\n\\n1\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Grant%20Proposals\/DOE\/Wisconsin-ISU%20Plastics%20to%20Aromatics\/MRF%20TEA%20and%20LCA%20analysis\/Codes%20and%20files\/MRF%20TEA%20LCA%20Slide%20Images.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"functions",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl\"",
		"children":[
			{
				"name":"GetResources",
				"kind":"Symbol",
				"definition":"GetResources[counties_]:=DeleteDuplicates[counties[[All, \"Resource\"]]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":64,
							"character":0
						},
						"end":{
							"line":64,
							"character":70
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[GetResources]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"FilterCountiesRandomly",
				"kind":"Symbol",
				"definition":"FilterCountiesRandomly[counties_, number_]:= RandomSample[counties, number]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":105,
							"character":0
						},
						"end":{
							"line":105,
							"character":75
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[FilterCountiesRandomly]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"getAvailableFeedstock",
				"kind":"Symbol",
				"definition":"getAvailableFeedstock[counties_, feedstocks_ : {\"Barley straw\", \"Biomass sorghum\",\n     \"Corn stover\", \"Energy cane\", \"Eucalyptus\", \"Hardwood lowland residue\",\n     \"Miscanthus\", \"Pine\", \"Poplar\", \"Softwood natural residue\", \"Softwood planted residue\",\n     \"Switchgrass\", \"Wheat straw\", \"Willow\"}] :=\n    Module[{},\n        GroupBy[Flatten[Table[{f, c[\"CountyG\"], c[f]}, {c, counties},\n             {f, feedstocks}], 1], First, Total[#[[All, 3]]]&] \/\/\n        Sort \/\/\n        Reverse\n    ]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":130,
							"character":0
						},
						"end":{
							"line":139,
							"character":5
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[getAvailableFeedstock]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"filterByWeights",
				"kind":"Symbol",
				"definition":"filterByWeights[counties_, biorefineries_, s_, placed_]:=Module[{},\n    Break[]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":289,
							"character":0
						},
						"end":{
							"line":291,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[filterByWeights]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"filterBySmallestCost",
				"kind":"Symbol",
				"definition":"filterBySmallestCost[counties_, biorefineries_, s_, placed_]:=TakeSmallestBy[\n            Select[\n                Association@Map[#->If[\n                    KeyExistsQ[counties[[1]], #[\"feedstock\"]],\n                    biorefineryCost[s, counties[[1;;2]], #],\n                    {0, 1*^9}] &, biorefineries],\n                    #[[1]] > 100 &]\n                    , #[[2]] &, 1] \/\/ Keys",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":293,
							"character":0
						},
						"end":{
							"line":300,
							"character":42
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[filterBySmallestCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"capitalCost",
				"kind":"Symbol",
				"definition":"capitalCost[m_, m0_, c0_, n_:0.7, i_:0.13]:=i*c0*(m\/m0)^n",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":304,
							"character":0
						},
						"end":{
							"line":304,
							"character":57
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[capitalCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"collectionCost",
				"kind":"Symbol",
				"definition":"collectionCost[m_, cf0_:3.103, cv0_, y0_:3200, f0_:0.6, t_:1.5]:=m*cf0 + m*cv0*t*Sqrt[m\/(Pi*y0*f0)]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":305,
							"character":0
						},
						"end":{
							"line":305,
							"character":99
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[collectionCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"deliveryCost",
				"kind":"Symbol",
				"definition":"deliveryCost[m_, d_, d0_:25, c0_:0.71, m0_:2000*330, t_:1.5]:=t*m*c0*(d+5)",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":306,
							"character":0
						},
						"end":{
							"line":306,
							"character":74
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[deliveryCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"operatingCost",
				"kind":"Symbol",
				"definition":"operatingCost[m_, m0_,o0_]:=o0*(m\/m0)",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":307,
							"character":0
						},
						"end":{
							"line":307,
							"character":37
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[operatingCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"costsBySite",
				"kind":"Symbol",
				"definition":"costsBySite[site_List,counties_, biorefinery_Association,capacity_, gathered_, costs_]:=Module[{nearestCounty, availableFeedstock, newFeedstock, c, d, p},\n\tIf[(gathered >= capacity) || (counties == {}),\n\t\tcosts,\n\t\t\n\t\tnearestCounty = First@counties;\n\t\tavailableFeedstock = nearestCounty[biorefinery[\"feedstock\"]]+1.0;\n\t\tnewFeedstock = If[gathered +availableFeedstock > capacity,  capacity-gathered, availableFeedstock];\n\t\tc = collectionCost[newFeedstock, biorefinery[\"cost transportation fixed\"], biorefinery[\"cost transportation variable\"]];\n\t\td = deliveryCost[newFeedstock, QuantityMagnitude@GeoDistance[site, Values[nearestCounty[[{\"Lat\", \"Lon\"}]]]]];\n\t\tp = biorefinery[\"conversion\"]*(gathered + newFeedstock);\n\t\tCheck[costsBySite[site, Rest@counties, biorefinery, capacity, gathered+newFeedstock, \n\t\t\tAppend[costs,\n\t\t\t{nearestCounty, newFeedstock,c,d}]],costs]\n\t]\t\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":324,
							"character":0
						},
						"end":{
							"line":338,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[costsBySite]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"plotBiorefineryCostByCapacity",
				"kind":"Symbol",
				"definition":"plotBiorefineryCostByCapacity[site_, counties_,biorefinery_, min_, max_]:=Module[{},\n\tListPlot[\n\t\tTranspose@Table[\n\t\t\tTake[biorefineryCost[site, counties, biorefinery, x],{4,7}],\n\t\t{x, min, max,10000}],\n\t\tPlotLabels -> {\"Col\",\"Del\",\"Ope\",\"Cap\"},\n\t\tPlotRange->All\n\t]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":341,
							"character":0
						},
						"end":{
							"line":349,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[plotBiorefineryCostByCapacity]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"GroupBiorefineriesBy",
				"kind":"Symbol",
				"definition":"GroupBiorefineriesBy[results_, category_, value_]:=GroupBy[results, \n    #[\"Biorefinery\"][category] &,\n    Map[\n        GeoPosition[#[[\"site\"]]] -> #[value] &\n    ]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":455,
							"character":0
						},
						"end":{
							"line":460,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[GroupBiorefineriesBy]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"GroupBiorefineriesByTwo",
				"kind":"Symbol",
				"definition":"GroupBiorefineriesByTwo[results_, category1_, category2_, value_]:=GroupBy[results, \n    {#[\"Biorefinery\"][category1], #[\"Biorefinery\"][category2]} &,\n    Map[\n        GeoPosition[#[[\"site\"]]] -> #[value] &\n    ]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":462,
							"character":0
						},
						"end":{
							"line":467,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[GroupBiorefineriesByTwo]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"postResults",
				"kind":"Symbol",
				"definition":"postResults[results_, label_]:= Module[{},\n    byFeedstockCapacity  = GroupBiorefineriesBy[results, \"feedstock\", \"Capacity\"];\n    byFeedstockCost = GroupBiorefineriesBy[results, \"feedstock\", \"Biofuel Cost\"];\n    byProductCapacity = GroupBiorefineriesBy[results, \"product\", \"Capacity\"];\n\n    totalsByFeedstockCapacity = SummarizeBiorefineriesBy[results, \"feedstock\", \"Capacity\",  Total];\n    meansByProductCost = SummarizeBiorefineriesBy[results, \"product\", \"Biofuel Cost\", Mean];\n\n    byFeedstockProductCapacity = GroupBiorefineriesByTwo[results, \"feedstock\", \"product\", \"Capacity\"];\n\n    KeyValueMap[\n        {k, v} |-> Flatten@{k, Min[v[[All, 2]]], Mean[v[[All, 2]]], Max[v[[All, 2]]]}, byFeedstockProductCapacity] \/\/ SortBy[Last] \/\/ Reverse \/\/ Grid;\n\n    DistributionChart[\n        byProductCapacity[[All,All,2]],\n        BarOrigin -> Left,\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \" (\" <> \n        ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \n        \"\\[PlusMinus] \" <>  \n        ToString[\n        NumberForm[\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \")\", byProductCapacity],\n        ChartElementFunction -> \"Quantile\",\n        Frame -> True,\n        FrameLabel -> {\"Biorefinery Capacity (MTPD)\", None},\n        ImageSize -> 15*72\n    ]  \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_biorefinery_capacity_by_product_histogram.png\", #] &;\n\n    DistributionChart[\n        byProductCapacity[[All, All, 2]],\n        BarOrigin -> Left,\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \" (\" <> ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \"\\[PlusMinus] \" <>  ToString[NumberForm[\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \")\", byProductCapacity],\n        ChartElementFunction -> \"Quantile\",\n        Frame -> True,\n        FrameLabel -> {\"Biorefinery Capacity (MTPD)\", None},\n        ImageSize -> 15*72\n    ]  \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_biorefinery_capacity_by_product_histogram.png\", #] &;\n\n    plot1 = ChartBiorefineriesBy[byFeedstockCapacity];\n    plot1 \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_map_by_feedstock.png\", #] &;\n    plot2 = ChartBiorefineriesBy[byProductCapacity];\n    plot2  \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_map_by_fuel.png\", #] &;\n\n    grouped = GroupBy[results,\n        #[\"Biorefinery\"][\"feedstock\"] &\n    ];\n\n    g= KeyValueMap[\n        {k, v} |-> \n        ListPlot[\n            v[[All, {\"Capacity\", \"Biofuel Cost\"}]],\n            PlotLabel -> k,\n            ImageSize -> 10*72\n        ],\n        grouped\n    ];\n\n\n    grouped = GroupBy[\n            results,\n            #[\"Biorefinery\"][\"product\"] &,\n            #[[All, \"Capacity\"]] &\n        ];\n\n    Histogram[\n        grouped,\n        ChartLegends -> SwatchLegend[\n            Keys@grouped\n        ],\n        Frame -> True,\n        FrameLabel -> {\"Capacity (MTPD)\", \"Biorefineries\"},\n        ChartStyle -> 1,\n        PlotRange -> {All, All},\n        ImageSize -> 10*72\n    ] \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_capacity_histogram.png\", #] &;\n\n    byFeedstockProductCapacityCounts=Flatten[KeyValueMap[\n        {StringRiffle[#1,\"-\"],\n        HistogramList[\n        #2[[All,2]],{{0,1000,2000,3000,4000,5000,10000,15000}}][[2]]}&,\n        KeySort[byFeedstockProductCapacity]],{1}];\n\n    byFeedstockProductCapacityCountsSorted = SortBy[byFeedstockProductCapacityCounts, Total[#[[2]]]&];\n    BarChart[\n        byFeedstockProductCapacityCountsSorted[[All,2]],\n        ChartLayout -> \"Stacked\",\n        ChartLabels->{byFeedstockProductCapacityCountsSorted[[All,1]],None},\n        BarOrigin->Left,\n        Frame->True,\n        FrameLabel->{None,\"Biorefinery Counts\"},\n        ChartLegends->SwatchLegend[sizes[[1]],LegendLabel->\"Biorefinery\\nCapacities\\n(MTPD)\"],\n        ImageSize->15*72\n    ]\/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_capacity_counts.png\", #] &;\n\n    capByCost = GroupBy[\n        results,\n        #[\"Biorefinery\"][\"product\"] &,\n        #[[All, {\"Capacity\", \"Biofuel Cost\"}]] &\n    ];\n\n    linearFits = Map[\n        NonlinearModelFit[Select[Values@#1, #[[2]] < 30 &], a*x^(n-1), {a,n},x] &,\n        capByCost\n    ];\n\n    p1 = ListPlot[\n        Values\/@capByCost,\n        PlotLegends -> Automatic,\n        Frame -> True,\n        FrameLabel -> {\"Biorefinery Capacity (MTPD)\", \"Biofuel Cost ($\/gallon)\"},\n        LabelStyle -> 30,\n        ImageSize -> 10*72\n    ] ;\n\n    p2 = Plot[\n            Evaluate@Table[l[x], {l, linearFits}],\n            {x, 10, 1600},\n            PlotStyle -> Dashed\n        ];\n\n    Show@@{p1, p2}\n\n    \n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":508,
							"character":0
						},
						"end":{
							"line":632,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[postResults]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"(* ::Package:: *)\\n\\n(* files = FileNames[\\\"*.csv\\\", \\n   NotebookDirectory[] <> \\\"data\/billion_ton\\\"];\\ndb = <|StringTake[FileBaseName[#], {17, -1}] -> Import[#, \\\"CSV\\\"] & \/@ \\n    files[[1 ;;]]|>; *)\\nsameCountyQ[c_, s_]:=(c[\\\"County\\\"] == (s[\\\"CountyG\\\"]) && c[\\\"State\\\"] == s[\\\"StateG\\\"]);\\n\\nLoadCountyCSV[]:=Import[NotebookDirectory[] <> FileNameJoin[{\\\"data\\\",\\\"billionton_county_download20211119-044647.csv\\\", \\\"billionton_county_download20211119-044647.csv\\\"}], \\\"CSV\\\"] \/\/ \\n    Map[Function[{row}, AssociationThread[First@# -> row] ], Rest@#] &;\\n\\nLoadCountyCSV[filter_]:=LoadCountyCSV[] \/\/ filter;\\n\\nLoadCountyGraphics[]:= Function[{shpfile},MapThread[\\n        <|\\\"CountyG\\\" -> #1, \\\"StateG\\\" -> #2, \\\"Lat\\\" -> #3, \\\"Lon\\\" -> #4, \\\"Graphics\\\" -> #5|> &,\\n        {\\n            First@(\\\"COUNTY\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"STATE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"LATITUDE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"LONGITUDE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"Geometry\\\" \/. shpfile)\\n        }\\n    ]][Import[NotebookDirectory[] <> \\\"data\/agmap\/agmap.shp\\\", {\\\"SHP\\\", \\\"Data\\\"}]];\\n\\nLoadCountyGraphics[filter_]:= LoadCountyGraphics[] \/\/ filter;\\n\\nLoadCountyDataGraphics[]:= MergeCountyDataGraphics[\\n    LoadCountyCSV[],\\n    LoadCountyGraphics[]\\n];\\n\\nLoadCountyDataGraphics[countyFilter_, graphicsFilter_]:= MergeCountyDataGraphics[\\n    LoadCountyCSV[countyFilter],\\n    LoadCountyGraphics[graphicsFilter]\\n];\\n\\nLoadCachedData[] :=Import[NotebookDirectory[] <> \\\"data\/county_data.mx\\\"];\\n\\nSaveCountyDataGraphics[]:= Export[NotebookDirectory[]<>\\\"data\/county_data.mx\\\", Select[LoadCountyDataGraphics[], KeyExistsQ[#, \\\"Resource\\\"] &], \\\"WXF\\\"];\\n\\nSaveFullCountyDataGraphics[]:=Module[{data, data2, files, db},\\n    data = Select[LoadCountyDataGraphics[], KeyExistsQ[#, \\\"Resource\\\"] &];\\n    files = FileNames[\\\"*.csv\\\", NotebookDirectory[] <> \\\"data\/billion_ton\\\"];\\n    db = <|StringTake[FileBaseName[#], {17,-1}] -> Import[#, \\\"CSV\\\"] &\/@ files|>;\\n    data2 = Table[\\n        Table[\\n            row[feed \/\/ StringReplace[{\\\"_\\\" -> \\\" \\\"}] \/\/ StringReplace[{x_~~y___:>ToUpperCase@x <> y}]] = SelectFirst[db[feed], #[[3]] == row[\\\"County\\\"] && #[[2]] == row[\\\"StateFull\\\"] &, {0, 0, 0, 0}][[4]],\\n            {feed, Keys@db}\\n        ];\\n        row,\\n        {row, data}\\n    ];\\n    Export[NotebookDirectory[] <> \\\"data\/full_county_data.mx\\\", data2, \\\"WXF\\\"];\\n];\\n\\nMergeCountyDataGraphics[counties_, shapes_]:=Map[\\n    Function[{shape},\\n        Check[Join[shape, SelectFirst[counties, sameCountyQ[#, shape] &]], shape]\\n    ],\\n    shapes\\n];\\n\\n\\n\\nGetResources[counties_]:=DeleteDuplicates[counties[[All, \\\"Resource\\\"]]]\\n\\nbilt[f_, p_, y_, pu_, du_, co2h_, co2t_, co2p_, co2c_, co2g_, ctf_, ctv_, cc_, cl_, co_, c_, od_, pc_]:= <|\\n        \\\"feedstock\\\" -> f,\\n        \\\"product\\\" -> p, \\n        \\\"conversion\\\" -> y,\\n        \\\"product units\\\" -> pu,\\n        \\\"demand units\\\" -> du,\\n        \\\"co2 harvesting\\\" -> co2h,\\n        \\\"co2 transportation\\\" -> co2t,\\n        \\\"co2 production\\\" -> co2p,\\n        \\\"co2 captured\\\" -> co2c,\\n        \\\"co2 gen used\\\" -> co2g,\\n        \\\"cost transportation fixed\\\" -> ctf,\\n        \\\"cost transportation variable\\\" -> ctv,\\n        \\\"cost capital\\\" -> cc,\\n        \\\"cost lifetime\\\" -> cl,\\n        \\\"cost operating\\\" -> co,\\n        \\\"capacity\\\" -> c,\\n        \\\"operating days\\\" -> od,\\n        \\\"production cost\\\" -> pc\\n    |>;\\n\\nloadBILT[] := Module[{d}, \\n    d = Import[NotebookDirectory[] <> \\\"data\/Example BILT biomass allocation calculation_220316.xlsx\\\", \\\"XLSX\\\"][[1]];\\n    Map[Apply[bilt, #] &, d[[4;;, 7;;24]]]\\n];\\n\\ntoTonnes = <|\\n    \\\"bu\\\" -> 56\/2205,\\n    \\\"lb\\\" -> 1\/2205,\\n    \\\"dt\\\" -> 1,\\n    \\\"null\\\" -> 0\\n|>;\\n\\n\\n\\n(* ::Section:: *)\\n(*Filter Functions*)\\n\\n\\nFilterCountiesRandomly[counties_, number_]:= RandomSample[counties, number]\\n\\nFilterSmallestCountiesBySize[counties_, max_]:=Select[counties, #[\\\"Production\\\"]*units[#[\\\"Production Unit\\\"]] <= max &];\\n\\nFilterLargestCountiesBySize[counties_, min_]:=Select[counties, #[\\\"Production\\\"]*units[#[\\\"Production Unit\\\"]] >= min &];\\n\\nFilterCountiesByProductionFraction[counties_, fraction_]:=Fold[\\n    {all, next} |-> If[\\n         Total[all[[All, \\\"Production\\\"]]*(units \/@ all[[All, \\\"Production Unit\\\"]])] \/\\n    Total[counties[[All, \\\"Production\\\"]]*(units \/@ counties[[All, \\\"Production Unit\\\"]])] <= fraction,\\n    Append[all, next],\\n    all\\n    ], \\n    {First@counties},\\n    Rest@counties\\n];\\n\\nFilterCountiesByResource[counties_, resource_String]:=Select[counties, #[\\\"Resource\\\"] === resource &];\\n\\n\\n\\n(* ::Section:: *)\\n(*Analyze Resources*)\\n\\n\\ngetAvailableFeedstock[counties_, feedstocks_ : {\\\"Barley straw\\\", \\\"Biomass sorghum\\\",\\n     \\\"Corn stover\\\", \\\"Energy cane\\\", \\\"Eucalyptus\\\", \\\"Hardwood lowland residue\\\",\\n     \\\"Miscanthus\\\", \\\"Pine\\\", \\\"Poplar\\\", \\\"Softwood natural residue\\\", \\\"Softwood planted residue\\\",\\n     \\\"Switchgrass\\\", \\\"Wheat straw\\\", \\\"Willow\\\"}] :=\\n    Module[{},\\n        GroupBy[Flatten[Table[{f, c[\\\"CountyG\\\"], c[f]}, {c, counties},\\n             {f, feedstocks}], 1], First, Total[#[[All, 3]]]&] \/\/\\n        Sort \/\/\\n        Reverse\\n    ]\\n\\n\\n(* ::Section:: *)\\n(*Biorefinery Assignment Section*)\\n\\n\\nAssignBiorefineriesRandomly[counties_, biorefineries_]:=Module[{biorefinery}, Table[\\n    biorefinery = RandomChoice[Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &]];\\n    Join[county, biorefinery],\\n    {county, counties}\\n]];\\n\\nAssignBiorefineriesByWeight[counties_, biorefineries_]:=Module[{allbiorefineries, biorefinery},\\n    Table[\\n        allbiorefineries = Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &];\\n        biorefinery = RandomChoice[allbiorefineries[[All, \\\"BiorefineryWeight\\\"]] -> allbiorefineries];\\n        Join[county, biorefinery],\\n        {county, counties}\\n]];\\n\\nAssignBiorefineriesByCost[counties_, biorefineries_]:=Table[\\n    allbiorefineries = Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &];\\n    byCosts = Map[{#, BiorefineryCountyCost[county, #]} &, allbiorefineries];\\n    Join[county, SortBy[byCosts, Last][[1, 1]]],\\n\\n    {county, counties}\\n];\\n\\nplotCounties[counties_, factor_]:=Module[{shps, rescaled, out},\\n    shps = LoadCountyGraphics[];\\n    rescaled = MapThread[Join[#1, <|\\\"output\\\" -> #2|>] &, {counties, Rescale[counties[[All, factor]]]}];\\n    out = Map[\\n        s |-> Join[s, <|\\\"output\\\" -> SelectFirst[rescaled, sameCountyQ[#1, s] &, <|\\\"output\\\" -> 0|>][\\\"output\\\"]|>], \\n        shps];\\n    Graphics[\\n        Flatten@Map[\\n            {ColorData[\\\"GreenBrownTerrain\\\"][#output], #[\\\"Graphics\\\"]} &,\\n            out\\n        ]\\n    ]\\n];\\n\\ngetCostsByCapacity[deployments_, biorefinery_, counties_List, max_:2*^6]:=Module[{sortedCountiesByDistance, gatheredBiomass},\\n    sortedCountiesByDistance = SortBy[counties, GeoDistance[Values@#[[{\\\"Lat\\\", \\\"Lon\\\"}]], Values@deployments[[{\\\"Lat\\\", \\\"Lon\\\"}]]] &];\\n    gatheredBiomass = gatherBiomass[{}, deployments, biorefinery, sortedCountiesByDistance, max];\\n    Table[\\n        totalBiomass = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        totalProduct = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"product units\\\"];\\n        collectionCosts = Total[gatheredBiomass[[1;;g, \\\"Collection Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        deliveryCosts = Total[gatheredBiomass[[1;;g, \\\"Delivery Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        capitalCosts = 0.13*biorefineryCost[totalBiomass, gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"capacity\\\"]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost capital\\\"]];\\n        operatingCosts = gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost operating\\\"];\\n        {\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], collectionCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], deliveryCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], operating\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], capitalCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], (collectionCosts + deliveryCosts + capitalCosts + operatingCosts)\/totalProduct}    \\n        },\\n        {g, Length@gatheredBiomass}\\n    ]\/\/ Transpose \/\/ AssociationThread[{\\n            \\\"Collection\\\",\\n            \\\"Delivery\\\",\\n            \\\"Operating\\\",\\n            \\\"Capital\\\",\\n            \\\"Total\\\"}->#]&\\n];\\n\\ngetLowestCostByCapacity[deployments_, biorefinery_, counties_List, max_:2*^6]:=Module[{sortedCountiesByDistance, gatheredBiomass},\\n    sortedCountiesByDistance = SortBy[counties, GeoDistance[Values@#[[{\\\"Lat\\\", \\\"Lon\\\"}]], Values@deployments[[{\\\"Lat\\\", \\\"Lon\\\"}]]] &];\\n    gatheredBiomass = gatherBiomass[{}, deployments, biorefinery, sortedCountiesByDistance, max];\\n    pastCost = 1*^9;\\n    optimalCapacity = 0;\\n    Table[\\n        totalBiomass = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        totalProduct = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"product units\\\"];\\n        collectionCosts = Total[gatheredBiomass[[1;;g, \\\"Collection Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        deliveryCosts = Total[gatheredBiomass[[1;;g, \\\"Delivery Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        capitalCosts = 0.13*biorefineryCost[totalBiomass, gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"capacity\\\"]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost capital\\\"]];\\n        operatingCosts = gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost operating\\\"];\\n        totalCost = (collectionCosts + deliveryCosts + capitalCosts + operatingCosts)\/totalProduct;\\n        If[totalCost > pastCost*1.10, optimalCost = pastCost; Return[];, pastCost = totalCost];\\n        {\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], collectionCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], deliveryCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], operating\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], capitalCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], totalCost}    \\n        },\\n        {g, Length@gatheredBiomass}\\n    ]\/\/ Transpose \/\/ AssociationThread[{\\n            \\\"Collection\\\",\\n            \\\"Delivery\\\",\\n            \\\"Operating\\\",\\n            \\\"Capital\\\",\\n            \\\"Total\\\"}->#]&\\n];\\n\\n\\n\\ntotalProduction[counties_]:=Total[counties[[All, \\\"Production\\\"]]*toTonnes\/@counties[[All, \\\"Production Unit\\\"]]];\\n\\ngetClusters[counties_, n_:30]:=Module[{},\\n    FindClusters[\\n        Values[counties[[All, {\\\"Lat\\\", \\\"Lon\\\", \\\"Production\\\"}]]] -> counties,\\n        n,\\n        \\\"Method\\\" -> \\\"KMeans\\\"\\n        ] \/\/ Map[Association, #,{2}] & \/\/\\n        SortBy[#, N@Mean[#[[All, \\\"Production\\\"]]] &] & \/\/ Reverse\\n];\\n\\n\\nbtToBilt = <|\\n    \\\"Corn\\\" -> {\\\"Corn stover\\\", \\\"AtJ-SPK\\\"}, \\n    \\\"Idle Land\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Barley\\\" -> {\\\"Barley straw\\\", \\\"AtJ-SPK\\\"},\\n    \\\"Soybeans\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Hay\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"}, \\n    \\\"Rice\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"},\\n    \\\"Pastureland available\\\" -> {\\\"\\\",\\\"\\\"},\\n    \\\"Cotton\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Wheat\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"}\\n|>;\\n\\n\\n\\n\\n\\nfeedstockByWeight = SemanticImport[NotebookDirectory[] <> \\\"data\/feedstockWeights.csv\\\", {String, Real, Real, Real, Real, Real}, \\\"NamedRows\\\", Delimiters -> \\\",\\\"];\\nfilterByFeedstockWeight[counties_, biorefineries_, s_, placed_]:=Module[{},\\n    largestResources = Select[feedstockByWeight[[All, \\\"Feedstock\\\"]], Total[counties[[All, #]]] > 50000 &];\\n\\n    choices = Flatten@Table[\\n        weights = Map[\\n            bio |->\\n            SelectFirst[\\n                feedstockByWeight, \\n                #[\\\"Feedstock\\\"] == resource && KeyExistsQ[#, bio[\\\"product\\\"]]  &, <|bio[\\\"product\\\"] -> 0|>][bio[\\\"product\\\"]], biorefineries];\\n\\n        RandomChoice[weights->biorefineries, 1],\\n        {resource, largestResources}\\n    ];\\n\\n    choices\\n];\\n\\n\\n\\n\\nfilterByWeights[counties_, biorefineries_, s_, placed_]:=Module[{},\\n    Break[]\\n]\\n\\nfilterBySmallestCost[counties_, biorefineries_, s_, placed_]:=TakeSmallestBy[\\n            Select[\\n                Association@Map[#->If[\\n                    KeyExistsQ[counties[[1]], #[\\\"feedstock\\\"]],\\n                    biorefineryCost[s, counties[[1;;2]], #],\\n                    {0, 1*^9}] &, biorefineries],\\n                    #[[1]] > 100 &]\\n                    , #[[2]] &, 1] \/\/ Keys \\n\\n\\n\\ncapitalCost[m_, m0_, c0_, n_:0.7, i_:0.13]:=i*c0*(m\/m0)^n\\ncollectionCost[m_, cf0_:3.103, cv0_, y0_:3200, f0_:0.6, t_:1.5]:=m*cf0 + m*cv0*t*Sqrt[m\/(Pi*y0*f0)]\\ndeliveryCost[m_, d_, d0_:25, c0_:0.71, m0_:2000*330, t_:1.5]:=t*m*c0*(d+5)\\noperatingCost[m_, m0_,o0_]:=o0*(m\/m0)\\n\\n\\nbiorefineryCost[site_List, counties_, biorefinery_, capacity_?NumberQ]:=Module[{sortedCounties, costs, sites,m,  o, cap, c, d,p}, \\n    sortedCounties = SortBy[Select[counties, #[biorefinery[\\\"feedstock\\\"]]>10&], (#[\\\"Lat\\\"]-site[[1]])^2+(#[\\\"Lon\\\"]-site[[2]])^2 &][[1;;UpTo@300]];\\n\\tcosts = costsBySite[site, sortedCounties, biorefinery, capacity, 0, {}];\\n\\tsites = costs[[All,1]];\\n\\tm = costs[[All,2]];\\n\\to = operatingCost[capacity, 2000*330, biorefinery[\\\"cost operating\\\"]];\\n\\tcap = capitalCost[capacity, 2000*330, biorefinery[\\\"cost capital\\\"], 0.7,0.13 ];\\n\\tc = Total@costs[[All,3]];\\n\\td = Total@costs[[All,4]];\\n\\tp = Total[m]*biorefinery[\\\"conversion\\\"]+1.0;\\n\\n    {sites, m, (c+d+o+cap)\/p, c\/p, d\/p,o\/p,cap\/p}\\n];\\n\\ncostsBySite[site_List,counties_, biorefinery_Association,capacity_, gathered_, costs_]:=Module[{nearestCounty, availableFeedstock, newFeedstock, c, d, p},\\n\\tIf[(gathered >= capacity) || (counties == {}),\\n\\t\\tcosts,\\n\\t\\t\\n\\t\\tnearestCounty = First@counties;\\n\\t\\tavailableFeedstock = nearestCounty[biorefinery[\\\"feedstock\\\"]]+1.0;\\n\\t\\tnewFeedstock = If[gathered +availableFeedstock > capacity,  capacity-gathered, availableFeedstock];\\n\\t\\tc = collectionCost[newFeedstock, biorefinery[\\\"cost transportation fixed\\\"], biorefinery[\\\"cost transportation variable\\\"]];\\n\\t\\td = deliveryCost[newFeedstock, QuantityMagnitude@GeoDistance[site, Values[nearestCounty[[{\\\"Lat\\\", \\\"Lon\\\"}]]]]];\\n\\t\\tp = biorefinery[\\\"conversion\\\"]*(gathered + newFeedstock);\\n\\t\\tCheck[costsBySite[site, Rest@counties, biorefinery, capacity, gathered+newFeedstock, \\n\\t\\t\\tAppend[costs,\\n\\t\\t\\t{nearestCounty, newFeedstock,c,d}]],costs]\\n\\t]\\t\\n]\\n\\n\\nplotBiorefineryCostByCapacity[site_, counties_,biorefinery_, min_, max_]:=Module[{},\\n\\tListPlot[\\n\\t\\tTranspose@Table[\\n\\t\\t\\tTake[biorefineryCost[site, counties, biorefinery, x],{4,7}],\\n\\t\\t{x, min, max,10000}],\\n\\t\\tPlotLabels -> {\\\"Col\\\",\\\"Del\\\",\\\"Ope\\\",\\\"Cap\\\"},\\n\\t\\tPlotRange->All\\n\\t]\\n]\\n\\n\\n\\n\\n\\noptimalBiorefineryCapacityCost[site_List, counties0_, biorefinery_] :=\\n    Module[{f, result, sol},\\n        f[x0_?NumericQ] :=\\n            (\\n                result = biorefineryCost[site, counties0, biorefinery, x0];\\n                result[[3]]\\n            );\\n        sol = Quiet@FindMinimum[f[x1], {x1, 720000, 10000, 720000*3}];\\n        <|\\\"site\\\" -> site, \\n        \\\"counties\\\" -> result[[1]], \\n        \\\"Capacity\\\" -> Total[result[[2]]] \/ 330.0, \\n        \\\"Biofuel Cost\\\" -> result[[3]], \\n        \\\"Biofuel Out\\\" -> Total[result[[2]]]*biorefinery[\\\"conversion\\\"], \\\"Feedstock\\\" -> biorefinery[\\\"feedstock\\\"], \\n        \\\"Product\\\" -> biorefinery[\\\"product\\\"], \\\"Biorefinery\\\" -> biorefinery, \\\"CO2\\\" -> Total[result[[2]]]*biorefinery[\\\"co2 captured\\\"]|>\\n    ];\\n\\njetFuelFirst[counties_, biorefineries_, site_, placed_] :=\\n    Module[{},\\n        aviationBiorefineries = Select[placed, #[[\\\"Biorefinery\\\", \\\"product\\\"\\n            ]] == \\\"AtJ-SPK\\\"&];\\n        If[Total[330 * aviationBiorefineries[[All, \\\"Capacity\\\"]] * aviationBiorefineries\\n            [[All, \\\"Biorefinery\\\", \\\"conversion\\\"]]] < 650*^6,\\n            Select[biorefineries, (#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&]\\n            ,\\n            Select[biorefineries, !(#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&]\\n        ]\\n    ];\\n\\nfilterJetFuelFirstThenByWeight[counties_, biorefineries_, site_, placed_\\n    ] :=\\n    Module[{},\\n        aviationBiorefineries = Select[placed, #[[\\\"Biorefinery\\\", \\\"product\\\"\\n            ]] == \\\"AtJ-SPK\\\"&];\\n        If[Total[aviationBiorefineries[[All, \\\"Biofuel Out\\\"]]] < 650*^6,\\n            \\n            Select[biorefineries, (#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&]\\n            ,\\n            filterByFeedstockWeight[counties, Select[biorefineries, !\\n                (#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&], site, placed]\\n        ]\\n    ];\\n\\nPlaceRefineries::usage = \\\"PlaceRefineries[counties, sites, filter, biorefineries] places biorefineries in sites, based on the counties and the filter. The filter is a function that takes the counties and biorefineries and returns, for example, the \\\\\\\"smallest cost\\\\\\\", \\\\\\\"random weight\\\\\\\", or \\\\\\\"smallest cost and random weight\\\\\\\". The result is an association of sites and the gathered results (counties, total capacity, cost, and biorefinery).\\\";\\n\\nPlaceRefineries[data_, sites_, filter_, biorefineries_, minCapacity_:\\n    30000] :=\\n    Module[{obc},\\n        gs = {};\\n        results07 =\\n            Flatten[\\n                Table[\\n                    rs = Complement[data, Flatten[gs[[All, \\\"counties\\\"\\n                        ]]]];\\n                    ns = SortBy[rs, (#[\\\"Lat\\\"] - s[[1]]) ^ 2 + (#[\\\"Lon\\\"\\n                        ] - s[[2]]) ^ 2&];\\n                    nb = Take[ns, UpTo[25]];\\n                    If[Length @ nb > 0,\\n                        sb = filter[nb, biorefineries, s, gs];\\n                        Map[\\n                            (\\n                                obc = optimalBiorefineryCapacityCost[\\n                                    s, nb, #];\\n                                AppendTo[gs, obc];\\n                                obc\\n                            )&\\n                            ,\\n                            sb\\n                        ]\\n                        ,\\n                        {<|\\\"Capacity\\\" -> 0|>}\\n                    ]\\n                    ,\\n                    {s, sites}\\n                ]\\n                ,\\n                1\\n            ];\\n        Select[results07, #[[\\\"Capacity\\\"]] * 330 > minCapacity&]\\n    ];\\n\\ngatherBiomass[counties_, biorefinery_, n_:1, r0_:Infinity] :=\\n    Module[{m, p, r, gathered, site, sources, co2c},\\n        site = SpatialMedian[Values @ counties[[1 ;; n, {\\\"Lat\\\", \\\"Lon\\\"\\n            }]]];\\n        sources = Select[counties[[1 ;; n]], KeyExistsQ[#, biorefinery[\\n            \\\"feedstock\\\"]]&];\\n        {m, r} = biorefineryCost[site, sources, biorefinery];\\n        co2c = m * biorefinery[\\\"co2 captured\\\"];\\n        p = m * biorefinery[\\\"conversion\\\"];\\n        gathered = <|\\\"site\\\" -> site, \\\"counties\\\" -> sources, \\\"Capacity\\\"\\n             -> m \/ 330.0, \\\"Biofuel Cost\\\" -> r, \\\"Product\\\" -> p, \\\"Biorefinery\\\" -> \\n            biorefinery, \\\"CO2\\\" -> co2c|>;\\n        If[And[r < 1.1 * r0, m < 4.5*^6, n < 20],\\n            gatherBiomass[counties, biorefinery, n + 1, r]\\n            ,\\n            gathered\\n        ]\\n    ];\\n\\n\\nGroupBiorefineriesBy[results_, category_, value_]:=GroupBy[results, \\n    #[\\\"Biorefinery\\\"][category] &,\\n    Map[\\n        GeoPosition[#[[\\\"site\\\"]]] -> #[value] &\\n    ]\\n]\\n\\nGroupBiorefineriesByTwo[results_, category1_, category2_, value_]:=GroupBy[results, \\n    {#[\\\"Biorefinery\\\"][category1], #[\\\"Biorefinery\\\"][category2]} &,\\n    Map[\\n        GeoPosition[#[[\\\"site\\\"]]] -> #[value] &\\n    ]\\n]\\n\\nSummarizeBiorefineriesBy[results_, category_, value_, function_]:= Map[\\n        function[#[[All, 2]]] &,\\n        GroupBiorefineriesBy[results, category, value]\\n    ];\\n\\nChartBiorefineriesBy[groups_]:=GeoBubbleChart[\\n    groups,\\n    GeoRange -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"],\\n    ChartStyle -> 2,\\n    BubbleSizes->{0.03, 0.1},\\n    ChartLegends -> {Placed[\\n        SwatchLegend[\\n            MapIndexed[ColorData[2][#2[[1]]] &, Keys@groups],\\n            Keys[groups],\\n            LegendLayout -> {\\\"Column\\\", 1},\\n            Background -> White,\\n            LegendFunction -> Frame,\\n            LegendLabel -> \\\"Group\\\",\\n            LabelStyle -> 20\\n        ], {0.9, 0.2}],\\n        Placed[\\n        PointLegend[\\n            {Gray, Gray, Gray},\\n            (NumberForm[#, {3,0}] &\/@{\\n                Min[Flatten@Values@groups[[All, All, 2]]],\\n                Median[Flatten@Values@groups[[All, All, 2]]],\\n                Max[Flatten@Values@groups[[All, All, 2]]]\\n            }),\\n            LegendLayout -> {\\\"Column\\\", 1},\\n            LegendMarkerSize -> {30, 50, 100},\\n            Background -> White,\\n            LegendFunction -> Frame,\\n            LegendLabel -> \\\"Capacity (MTPD)\\\",\\n            LabelStyle -> 20\\n        ], {0.1, 0.2}]},\\n    ImageSize -> 20*72\\n];\\n\\n\\npostResults[results_, label_]:= Module[{},\\n    byFeedstockCapacity  = GroupBiorefineriesBy[results, \\\"feedstock\\\", \\\"Capacity\\\"];\\n    byFeedstockCost = GroupBiorefineriesBy[results, \\\"feedstock\\\", \\\"Biofuel Cost\\\"];\\n    byProductCapacity = GroupBiorefineriesBy[results, \\\"product\\\", \\\"Capacity\\\"];\\n\\n    totalsByFeedstockCapacity = SummarizeBiorefineriesBy[results, \\\"feedstock\\\", \\\"Capacity\\\",  Total];\\n    meansByProductCost = SummarizeBiorefineriesBy[results, \\\"product\\\", \\\"Biofuel Cost\\\", Mean];\\n\\n    byFeedstockProductCapacity = GroupBiorefineriesByTwo[results, \\\"feedstock\\\", \\\"product\\\", \\\"Capacity\\\"];\\n\\n    KeyValueMap[\\n        {k, v} |-> Flatten@{k, Min[v[[All, 2]]], Mean[v[[All, 2]]], Max[v[[All, 2]]]}, byFeedstockProductCapacity] \/\/ SortBy[Last] \/\/ Reverse \/\/ Grid;\\n\\n    DistributionChart[\\n        byProductCapacity[[All,All,2]],\\n        BarOrigin -> Left,\\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \\\" (\\\" <> \\n        ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\n        \\\"\\\\[PlusMinus] \\\" <>  \\n        ToString[\\n        NumberForm[\\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\", byProductCapacity],\\n        ChartElementFunction -> \\\"Quantile\\\",\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n        ImageSize -> 15*72\\n    ]  \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_biorefinery_capacity_by_product_histogram.png\\\", #] &;\\n\\n    DistributionChart[\\n        byProductCapacity[[All, All, 2]],\\n        BarOrigin -> Left,\\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \\\" (\\\" <> ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\\"\\\\[PlusMinus] \\\" <>  ToString[NumberForm[\\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\", byProductCapacity],\\n        ChartElementFunction -> \\\"Quantile\\\",\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n        ImageSize -> 15*72\\n    ]  \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_biorefinery_capacity_by_product_histogram.png\\\", #] &;\\n\\n    plot1 = ChartBiorefineriesBy[byFeedstockCapacity];\\n    plot1 \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_map_by_feedstock.png\\\", #] &;\\n    plot2 = ChartBiorefineriesBy[byProductCapacity];\\n    plot2  \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_map_by_fuel.png\\\", #] &;\\n\\n    grouped = GroupBy[results,\\n        #[\\\"Biorefinery\\\"][\\\"feedstock\\\"] &\\n    ];\\n\\n    g= KeyValueMap[\\n        {k, v} |-> \\n        ListPlot[\\n            v[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]],\\n            PlotLabel -> k,\\n            ImageSize -> 10*72\\n        ],\\n        grouped\\n    ];\\n\\n\\n    grouped = GroupBy[\\n            results,\\n            #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n            #[[All, \\\"Capacity\\\"]] &\\n        ];\\n\\n    Histogram[\\n        grouped,\\n        ChartLegends -> SwatchLegend[\\n            Keys@grouped\\n        ],\\n        Frame -> True,\\n        FrameLabel -> {\\\"Capacity (MTPD)\\\", \\\"Biorefineries\\\"},\\n        ChartStyle -> 1,\\n        PlotRange -> {All, All},\\n        ImageSize -> 10*72\\n    ] \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_capacity_histogram.png\\\", #] &;\\n\\n    byFeedstockProductCapacityCounts=Flatten[KeyValueMap[\\n        {StringRiffle[#1,\\\"-\\\"],\\n        HistogramList[\\n        #2[[All,2]],{{0,1000,2000,3000,4000,5000,10000,15000}}][[2]]}&,\\n        KeySort[byFeedstockProductCapacity]],{1}];\\n\\n    byFeedstockProductCapacityCountsSorted = SortBy[byFeedstockProductCapacityCounts, Total[#[[2]]]&];\\n    BarChart[\\n        byFeedstockProductCapacityCountsSorted[[All,2]],\\n        ChartLayout -> \\\"Stacked\\\",\\n        ChartLabels->{byFeedstockProductCapacityCountsSorted[[All,1]],None},\\n        BarOrigin->Left,\\n        Frame->True,\\n        FrameLabel->{None,\\\"Biorefinery Counts\\\"},\\n        ChartLegends->SwatchLegend[sizes[[1]],LegendLabel->\\\"Biorefinery\\\\nCapacities\\\\n(MTPD)\\\"],\\n        ImageSize->15*72\\n    ]\/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_capacity_counts.png\\\", #] &;\\n\\n    capByCost = GroupBy[\\n        results,\\n        #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n        #[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]] &\\n    ];\\n\\n    linearFits = Map[\\n        NonlinearModelFit[Select[Values@#1, #[[2]] < 30 &], a*x^(n-1), {a,n},x] &,\\n        capByCost\\n    ];\\n\\n    p1 = ListPlot[\\n        Values\/@capByCost,\\n        PlotLegends -> Automatic,\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", \\\"Biofuel Cost ($\/gallon)\\\"},\\n        LabelStyle -> 30,\\n        ImageSize -> 10*72\\n    ] ;\\n\\n    p2 = Plot[\\n            Evaluate@Table[l[x], {l, linearFits}],\\n            {x, 10, 1600},\\n            PlotStyle -> Dashed\\n        ];\\n\\n    Show@@{p1, p2}\\n\\n    \\n]\\n\\n\\n\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl"
		},
		"collapsibleState":1
	}
]