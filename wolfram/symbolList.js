[
	{
		"name":"scratch",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/scratch.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"z = {1, 2, 3}\\n\\na = 5\\n\\nb = <|\\\"a\\\" -> 1, \\\"b\\\" -> 2, \\\"c\\\" -> 3|>\\n\\nc = \\\"54544f\\\"\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/scratch.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/scratch.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"Crop%20versus%20CSR%20model",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"csr={{\\\"Linn\\\",68.1`},{\\\"Sioux\\\",85.3`},{\\\"Polk\\\",70.7`},{\\\"Tama\\\",70.3`},{\\\"Sac\\\",82.8`},{\\\"Clay\\\",79.9`},{\\\"Cass\\\",69.5`},{\\\"Lyon\\\",75.1`},{\\\"Lee\\\",52.3`},{\\\"Kossuth\\\",78.2`},{\\\"Iowa\\\",62.5`},{\\\"Jasper\\\",68.5`},{\\\"Page\\\",70.6`},{\\\"Story\\\",80.2`},{\\\"Adair\\\",64},{\\\"Clayton\\\",43.9`},{\\\"Jones\\\",62.2`},{\\\"Ida\\\",77.1`},{\\\"Cedar\\\",76.9`},{\\\"Fayette\\\",68.2`},{\\\"Clinton\\\",63},{\\\"Benton\\\",78.9`},{\\\"Dallas\\\",76.6`},{\\\"Butler\\\",74.6`},{\\\"Davis\\\",46.7`},{\\\"Floyd\\\",79.5`},{\\\"Scott\\\",72.4`},{\\\"Mills\\\",71.8`},{\\\"Plymouth\\\",73.5`},{\\\"Boone\\\",75.5`},{\\\"Shelby\\\",69.6`},{\\\"Taylor\\\",58.5`},{\\\"Carroll\\\",76.5`},{\\\"Webster\\\",75.1`},{\\\"Wright\\\",78.6`},{\\\"Hardin\\\",79.5`},{\\\"Jackson\\\",44},{\\\"Obrien\\\",91.4`},{\\\"Woodbury\\\",61.4`},{\\\"Monona\\\",59.1`},{\\\"Harrison\\\",61.2`},{\\\"Lucas\\\",43.8`},{\\\"Keokuk\\\",63},{\\\"Greene\\\",78.3`},{\\\"Guthrie\\\",61.4`},{\\\"Crawford\\\",68.6`},{\\\"Marion\\\",59.7`},{\\\"Warren\\\",57.3`},{\\\"Wayne\\\",50.7`},{\\\"Johnson\\\",65},{\\\"Franklin\\\",79.4`},{\\\"Henry\\\",63.8`},{\\\"Union\\\",63.2`},{\\\"Calhoun\\\",82.2`},{\\\"Clarke\\\",47.2`},{\\\"Hancock\\\",74.6`},{\\\"Decatur\\\",40.1`},{\\\"Grundy\\\",86.9`},{\\\"Dubuque\\\",49.2`},{\\\"Louisa\\\",63.7`},{\\\"Marshall\\\",75.7`},{\\\"Pottawattamie\\\",68.4`},{\\\"Madison\\\",60.8`},{\\\"Mahaska\\\",68.2`},{\\\"Palo Alto\\\",77},{\\\"Worth\\\",73.8`},{\\\"Allamakee\\\",40.8`},{\\\"Hamilton\\\",79.1`},{\\\"Adams\\\",61.1`},{\\\"Ringgold\\\",50.2`},{\\\"Cherokee\\\",82.2`},{\\\"Delaware\\\",65.1`},{\\\"Fremont\\\",72.1`},{\\\"Howard\\\",76.9`},{\\\"Bremer\\\",75.5`},{\\\"Winneshiek\\\",59.2`},{\\\"Buchanan\\\",75.8`},{\\\"Mitchell\\\",80.9`},{\\\"Emmet\\\",77.2`},{\\\"Poweshiek\\\",67.9`},{\\\"Monroe\\\",48.3`},{\\\"Wapello\\\",56.6`},{\\\"Osceola\\\",86.3`},{\\\"Pocahontas\\\",81.2`},{\\\"Black Hawk\\\",73.9`},{\\\"Buena Vista\\\",83.4`},{\\\"Chickasaw\\\",77.2`},{\\\"Jefferson\\\",61},{\\\"Audubon\\\",69.3`},{\\\"Washington\\\",68},{\\\"Van Buren\\\",49},{\\\"Cerro Gordo\\\",74.6`},{\\\"Appanoose\\\",46.7`},{\\\"Humboldt\\\",80.3`},{\\\"Dickinson\\\",79.9`},{\\\"Winnebago\\\",72.9`},{\\\"Muscatine\\\",64.9`},{\\\"Des Moines\\\",67},{\\\"Montgomery\\\",70.3`}};\\n\\n\\n\\ncsr = Import[\\\"\/Users\/mark\/Downloads\/billionton_county_download20211119-044647.csv\/CSR.xlsx\\\",{\\\"Data\\\", 1}]\\n\\n\\n\\nbillionTon =SemanticImport[\\\"\/Users\/mark\/Downloads\/billionton_county_download20211119-044647.csv\/billionton_county_download20211119-044647.csv\\\",{\\\"Integer\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"Integer\\\",\\\"String\\\",\\\"Real\\\",\\\"Integer\\\",\\\"Real\\\",\\\"String\\\",\\\"Real\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\"},\\\"NamedRows\\\"];\\n\\n\\n\\nresources = DeleteDuplicates[billionTon[[All,\\\"Resource\\\"]]]\\n\\n\\n\\niowaBillionTon = Select[billionTon, #[[\\\"State\\\"]]==\\\"Iowa\\\"&];\\n\\n\\n\\nClearAll[f]\\nSetAttributes[f,HoldAll]\\nf[r_]:=Join[r,<| \\\"CSR\\\"->First[Select[csr, #[[1]]<> \\\" County\\\"==r[[\\\"County\\\"]] &],{0,0}][[2]]|>]\\niowaBillionTonCSR=Map[f,iowaBillionTon];\\n\\n\\n\\ng[r_]:=Module[{x,y,data},\\ndata =Select[iowaBillionTonCSR, #[\\\"Resource\\\"]==r&];\\nx = data[[All,\\\"CSR\\\"]];\\ny = data[[All, \\\"Yield\\\"]];\\nIf[Length@data>1,\\nr-><|\\\"data\\\"->Transpose@{x,y},\\\"unit\\\"->data[[1,\\\"Yield Unit\\\"]]|>\\n]\\n]\\n\\npairedData=Association[DeleteCases[g\/@resources[[1;;9]],Null]];\\n\\n\\n\\nfits = {LinearModelFit[#[\\\"data\\\"],x, x],#[\\\"unit\\\"]}&\/@pairedData\\n\\n\\n\\nfitPlots = Association@KeyValueMap[#1->Plot[#2[[1]][x],{x,10,100}, \\nEpilog->Text[#2[[1]][\\\"BestFit\\\"],Scaled[{0.3,0.9}]],\\nPlotRange->{{0,100},All},\\nPlotLabel->#1,\\nFrame->True,\\nFrameLabel->{\\\"CSR\\\",#1<> \\\" Yield\\\\n(\\\" <> #2[[2]]<>\\\")\\\"},\\nImageSize->10*72\\n]&,fits];\\n\\n\\n\\ngraphs = Map[\\nListPlot[\\n#1[[1]],\\nImageSize->10*72\\n]&,pairedData];\\n\\n\\n\\nMapThread[Show,{fitPlots,graphs}]\/\/Values\/\/Partition[#,2]&\/\/Grid\\n\\n\\n\\nresources\\n\\n\\n\\notherResources={\\\"Wheat\\\",\\\"Sorghum\\\",\\\"Cotton\\\",\\\"Rice\\\",\\\"Barley\\\"} ;\\n\\n\\n\\nr = \\\"Wheat\\\"\\nyields=Select[billionTon,#[\\\"Resource\\\"]==r&][[All,\\\"Yield\\\"]];\\nHistogram[data[[All,\\\"Yield\\\"]]]\\n\\n\\n\\nQuantile[yields,{0.05,0.95}]\\n\\n\\n\\nQuantile[pairedData[\\\"Hay\\\"][\\\"data\\\"][[All,2]],{0.05,0.95}]\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"Biorefinery%20Scale%20Analysis%20By%20Feedstock%20Type",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/Biorefinery%20Scale%20Analysis%20By%20Feedstock%20Type.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"(* ::Package:: *)\\n\\n(* ::Title:: *)\\n(*Optimal biorefinery scales*)\\n\\n\\n(* ::Text:: *)\\n(*The purpose of this file is to determine the optimal scale for every biorefinery at each county*)\\n\\n\\n\\nGet[NotebookDirectory[]<>\\\"functions.wl\\\"];\\n\\nbiomass = Import[FileNameJoin[{NotebookDirectory[] ,\\\"..\\\", \\\"data\\\",\\\"biomass.mx\\\"}]];\\n\\n\\nbiorefineries = Select[\\n    loadBILT[],\\n    MemberQ[{\\\"FT-SPK\\\", \\\"AtJ-SPK\\\", \\\"FT-Diesel\\\", \\\"FT-Gasoline\\\", \\\"EtOH\\\"},\\n    #[\\\"product\\\"]]&];\\nfeedstocks = biorefineries[[All, \\\"feedstock\\\"]] \/\/ DeleteDuplicates;\\n\\n\\n\\nbiorefineriesByGroup = KeyValueMap[\\n    Function[{k,v},\\n        SelectFirst[\\n            biorefineries,\\n            MemberQ[v, #[\\\"feedstock\\\"]] &,\\n            \\\"No Biorefinery\\\"\\n        ]\\n    ],\\n    feedstockGroups\\n]\\n\\n\\nn = 1;\\nallresults = ParallelTable[\\n    n=n+1;\\n    Print[N[n\/(Length@biorefineriesByGroup*Length@biomass)]];\\n    counties = biomass;\\n    Flatten@{\\n        b[\\\"feedstock\\\"],\\n        b[\\\"product\\\"],\\n        Values[\\n            optimalBiorefineryCapacityCost[\\n                Values[c[[{\\\"Lat\\\",\\\"Lon\\\"}]]],\\n                counties,\\n            b][[{\\\"Capacity\\\",\\\"Biofuel Cost\\\",\\\"CO2\\\"}]]]\\n    },\\n    {b, biorefineriesByGroup[[1;;2]]},{c, biomassxbox[[1;;]]} \\n];\\n\\nExport[FileNameJoin[{NotebookDirectory[], \\\"results.mx\\\"}], allresults];\\n\\nExport[FileNameJoin[{NotebookDirectory[], \\\"results.csv\\\"}], Flatten[allresults[[2]],1]];\\n\\n\\nLength@biorefineriesByGroup*Length@counties\\n\\noptimals = Import[FileNameJoin[{NotebookDirectory[], \\\"results.csv\\\"}],\\\"CSV\\\"];\\n\\nbyFuelFeedstock = GroupBy[optimals, {#[[2]]&, #[[1]]&}];\\n\\nbyFuelFeedstock \/\/ Keys\\n\\nbyFuelFeedstock[\\\"AtJ-SPK\\\"] \/\/ Keys\\n\\np1 = ListPlot[\\n    Evaluate@KeyValueMap[{k,v} |->\\n        v[[1;;, {3, 4}]],\\n        byFuelFeedstock[\\\"AtJ-SPK\\\"]\\n    ],\\n    PlotLabel -> \\\"Aviation Jet Fuel\\\",\\n    PlotLegends -> SwatchLegend[\\n        Automatic,\\n        Keys@byFuelFeedstock[\\\"AtJ-SPK\\\"],\\n        LegendLayout -> {\\\"Column\\\", 1}],\\n    Frame -> True,\\n    FrameLabel -> {\\n        {Style[\\\"Biofuel Cost ($\/gallon)\\\", 32], None},\\n        {Style[\\\"Biorefinery Input Capacity (Metric Tons per Day)\\\", 32], None}\\n    },\\n    FrameTicksStyle -> 32,\\n    LabelStyle -> 36,\\n    ImageSize -> 20*72\\n]\\n\\nExport[NotebookDirectory[] <> \\\"figures\/aviation_jet_fuel.jpg\\\", p1]\\n\\nfit = NonlinearModelFit[\\n        [[1;;, {3,4}]],\\n        a*(1\/x)^b,\\n        {{a,5000, 10, 10000}, {b, 0.7, 0.2, 1.5}},\\n        x\\n    ]\\n\\nfit[3000]\\n  \\n\\nbands90[x_]:=fit[\\\"MeanPredictionBands\\\", ConfidenceLevel -> 0.9999999]\\n\\n\\n\\nCases[\\n    byFuel[[2, 1;;, {3,4}]],\\n    {0., _},\\n    {-2}]\\n\\nMin[Flatten@byFuel[[2, 1;;, {3,4}]]]\\n\\nPlot[10000*(1\/x)^0.7, {x, 100, 5000}]\\n\\nfits = KeyValueMap[ {k,v} |->\\n    NonlinearModelFit[\\n        v[[1;;, {3, 4}]],\\n        a*(1\/x)^b,\\n        {{a,5000, 10, 10000}, {b, 0.7, 0.2, 1.5}},\\n        x\\n    ], byFuelFeedstock[\\\"AtJ-SPK\\\"]];\\n\\nPlot[{fit[x], bands90[x]}, \\n    {x, 100, 5000},\\n    Filling -> {2 -> {1}}]\\n\\n\\np1 = Plot[\\n    Evaluate@Table[\\n    Check[f[x],0],\\n    {f, fits[[1;;]]}\\n], {x, 100, 10000},\\n    PlotLabel -> \\\"Aviation Jet Fuel\\\",\\n    PlotLabels -> Keys@byFuelFeedstock[\\\"AtJ-SPK\\\"],\\n    Frame -> True,\\n    FrameLabel -> {\\n        {Style[\\\"Biofuel Cost ($\/gallon)\\\", 32], None},\\n        {Style[\\\"Biorefinery Input Capacity (Metric Tons per Day)\\\", 32], None}\\n    },\\n    FrameTicksStyle -> 32,\\n    LabelStyle -> 36,\\n    ImageSize -> 20*72\\n\\n]\\n\\n\\nTable[\\n    ListPlot[\\n        b[[All, {3, 4}]],\\n        PlotRange->{All, {0, 100}}\\n    ],\\n    {b, byFuel}\\n] \/\/ Column\\n\\nbins = {{0, 250, 750, 1250, 2750, 5250, 10750}};\\ncountsBySize[r_]:=Round[HistogramList[\\n    r,\\n    bins\\n][[2]], 100];\\n\\nbyBiomass = GroupBy[\\n    optimals,\\n    First,\\n    #[[All, 3]] &\\n] \/\/ SortBy[Mean];\\n\\np1 = DistributionChart[\\n    byBiomass,\\n    BarOrigin -> Left,\\n    ChartLabels -> Keys@byBiomass,\\n    ChartElementFunction -> \\\"HistogramDensity\\\",\\n    PlotLabel -> \\\"Optimal Biorefinery Capacities by Biomass Type\\\\nEstimated from U.S. counties\\\",\\n    FrameLabel -> {\\\"Biomass Input Capacity\\\\n(metric tonnes per day)\\\", None},\\n    GridLines -> {Automatic, Automatic}\\n];\\nExport[FileNameJoin[{NotebookDirectory[], \\\"figures\\\", \\\"optimalByBiomass.jpg\\\"}], p1]\\n\\nbyFuel = GroupBy[\\n    optimals,\\n    #[[2]] &,\\n    #[[All, 3]] &\\n];\\n\\np2 = DistributionChart[\\n    byFuel,\\n    BarOrigin -> Left,\\n    ChartLabels -> Keys@byFuel,\\n    ChartElementFunction -> \\\"HistogramDensity\\\",\\n    PlotLabel -> \\\"Optimal Biorefinery Capacities by Biofuel Type\\\\nEstimated from U.S. counties\\\",\\n    FrameLabel -> {\\\"Biomass Input Capacity\\\\n(metric tonnes per day)\\\", None},\\n    GridLines -> {Automatic, Automatic}\\n];\\nExport[FileNameJoin[{NotebookDirectory[], \\\"figures\\\", \\\"optimalByFuel.jpg\\\"}], p2]\\n\\n\\ncountsBySizeTable = KeyValueMap[{k,v} |-> Flatten@{k, countsBySize[v]}, byBiomass] \/\/ Reverse;\\ncountsBySizeTable \\nReverse \/\/ TableForm[\\n    #,\\n    TableHeadings -> {\\n        None, \\n    Flatten@{\\\"Feedstock\/Capacity (MTPD)\\\", \\n        BlockMap[Mean,bins[[1]],2,1]\\n    }}\\n] &\\n\\np3 = MatrixPlot[\\n    countsBySizeTable[[All,2;;]]\/(5*3050),\\n    FrameTicks -> {\\n        {\\n            Transpose[{Range@Length@countsBySizeTable, countsBySizeTable[[All,1]]}], None},\\n        {None, \\n            Transpose[{Range@Length@#, #} & @BlockMap[Mean,bins[[1]],2,1]]\\n        }\\n    },\\n    FrameLabel -> {\\n        {None,\\\"Biomass Input Capacity\\\\n(metric tonnes per day)\\\"},\\n        {None, None}\\n    },\\n    PlotLegends -> Automatic\\n]\\nExport[FileNameJoin[{NotebookDirectory[], \\\"figures\\\", \\\"optimalByFuelMatrixPlot.jpg\\\"}], p3]\\n\\n(* Biorefinery Capacities by State: https:\/\/neo.ne.gov\/programs\/stats\/inf\/122.htm *)\\n(* ADM's Decatur, IL corn ethanol facility consumes almost 10,000 mtpd of corn *)\\n\\nusBios = Import[NotebookDirectory[] <> \\\"us_biorefineries.txt\\\", \\\"Table\\\"]\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/Biorefinery%20Scale%20Analysis%20By%20Feedstock%20Type.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/Biorefinery%20Scale%20Analysis%20By%20Feedstock%20Type.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"saveBiomassData",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/saveBiomassData.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"\\nfs = FileNames[\\\"*.csv\\\", FileNameJoin[{NotebookDirectory[], \\\"data\\\", \\\"billion_ton\\\"}]]\\nd = Flatten[Table[Import[f, \\\"CSV\\\"], {f, fs}],1];\\n\\n\\nfidToName[fid_]:=(First[StringSplit[fid, \\\".\\\"],\\\"\\\"] \\n    \/\/ StringReplace[{\\\"bts_county_2016_\\\" -> \\\"\\\"}]\\n    \/\/ StringReplace[{\\\"_\\\" -> \\\" \\\"}]\\n    \/\/ ToUpperCase[StringTake[#, 1]] <> StringTake[#, {2, -1}] &)\\n\\nbiomassNames = Map[fidToName, d[[All, 1]]] \/\/ DeleteDuplicates \/\/ DeleteCases[#, \\\"FID\\\"] &;\\n\\nstateNames = Apply[AssociationThread, Transpose@Import[FileNameJoin[{NotebookDirectory[], \\\"data\\\", \\\"states.csv\\\"}], \\\"CSV\\\"][[2;;,{1,2}]]]\\ngs = LoadCountyGraphics[];\\n\\n\\ngraphicBiomass[g_]:=Module[{biomass, a},\\n    a = AssociationThread[biomassNames -> ConstantArray[0, Length@biomassNames]];\\n    biomass = Select[d, stateNames[#[[2]]] == g[\\\"StateG\\\"] && #[[3]] == g[\\\"CountyG\\\"] &];\\n    Map[(a[fidToName[#[[1]]]] = #[[4]]) &, biomass];\\n    Merge[{g, a}, Total]\\n]\\n\\n\\nnewGs = Map[graphicBiomass, gs];\\nExport[FileNameJoin[{NotebookDirectory[], \\\"data\\\", \\\"biomass.mx\\\"}], newGs];\\n\\nTable[\\n    Export[FileNameJoin[{NotebookDirectory[], \\\"figures\\\", n <> \\\".png\\\"}], \\n        GeoRegionValuePlot[\\n            MapThread[Rule, Transpose@Values[newGs[[All, {\\\"Graphics\\\",n}]]]],\\n            ClippingStyle -> Transparent,\\n            PlotRange -> {10, 1*^9},\\n            ColorFunction -> \\\"BlueGreenYellow\\\"\\n        ]\\n    ];,\\n    {n, biomassNames}\\n]\\n\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/saveBiomassData.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/saveBiomassData.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"functions",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/functions.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"(* ::Package:: *)\\n\\n(* files = FileNames[\\\"*.csv\\\", \\n   NotebookDirectory[] <> \\\"data\/billion_ton\\\"];\\ndb = <|StringTake[FileBaseName[#], {17, -1}] -> Import[#, \\\"CSV\\\"] & \/@ \\n    files[[1 ;;]]|>; *)\\nsameCountyQ[c_, s_]:=(c[\\\"County\\\"] == (s[\\\"CountyG\\\"]) && c[\\\"State\\\"] == s[\\\"StateG\\\"]);\\n\\nLoadCountyCSV[]:=Import[FileNameJoin[{NotebookDirectory[], \\\"..\\\", \\\"data\\\",\\\"billionton_county_download20211119-044647.csv\\\", \\\"billionton_county_download20211119-044647.csv\\\"}], \\\"CSV\\\"] \/\/ \\n    Map[Function[{row}, AssociationThread[First@# -> row] ], Rest@#] &;\\n\\nLoadCountyCSV[filter_]:=LoadCountyCSV[] \/\/ filter;\\n\\nLoadCountyGraphics[]:= Function[{shpfile},MapThread[\\n        <|\\\"CountyG\\\" -> #1, \\\"StateG\\\" -> #2, \\\"Lat\\\" -> #3, \\\"Lon\\\" -> #4, \\\"Graphics\\\" -> #5|> &,\\n        {\\n            First@(\\\"COUNTY\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"STATE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"LATITUDE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"LONGITUDE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"Geometry\\\" \/. shpfile)\\n        }\\n    ]][Import[FileNameJoin[{NotebookDirectory[], \\\"..\\\", \\\"data\\\",\\\"agmap\\\", \\\"agmap.shp\\\"}], {\\\"SHP\\\", \\\"Data\\\"}]];\\n\\nLoadCountyGraphics[filter_]:= LoadCountyGraphics[] \/\/ filter;\\n\\nLoadCountyDataGraphics[]:= MergeCountyDataGraphics[\\n    LoadCountyCSV[],\\n    LoadCountyGraphics[]\\n];\\n\\nLoadCountyDataGraphics[countyFilter_, graphicsFilter_]:= MergeCountyDataGraphics[\\n    LoadCountyCSV[countyFilter],\\n    LoadCountyGraphics[graphicsFilter]\\n];\\n\\nLoadCachedData[] :=Import[FileNameJoin[{NotebookDirectory[], \\\"data\\\",\\\"county_data.mx\\\"}]];\\n\\nSaveCountyDataGraphics[]:= Export[FileNameJoin[{NotebookDirectory[], \\\"data\\\",\\\"county_data.mx\\\"}], Select[LoadCountyDataGraphics[], KeyExistsQ[#, \\\"Resource\\\"] &], \\\"WXF\\\"];\\n\\nSaveFullCountyDataGraphics[]:=Module[{data, data2, files, db},\\n    data = Select[LoadCountyDataGraphics[], KeyExistsQ[#, \\\"Resource\\\"] &];\\n    files = FileNames[\\\"*.csv\\\", NotebookDirectory[] <> \\\"data\/billion_ton\\\"];\\n    db = <|StringTake[FileBaseName[#], {17,-1}] -> Import[#, \\\"CSV\\\"] &\/@ files|>;\\n    data2 = Table[\\n        Table[\\n            row[feed \/\/ StringReplace[{\\\"_\\\" -> \\\" \\\"}] \/\/ StringReplace[{x_~~y___:>ToUpperCase@x <> y}]] = SelectFirst[db[feed], #[[3]] == row[\\\"County\\\"] && #[[2]] == row[\\\"StateFull\\\"] &, {0, 0, 0, 0}][[4]],\\n            {feed, Keys@db}\\n        ];\\n        row,\\n        {row, data}\\n    ];\\n    Export[FileNameJoin[{NotebookDirectory[], \\\"data\\\",\\\"full_county_data.mx\\\"}], data2, \\\"WXF\\\"];\\n];\\n\\nMergeCountyDataGraphics[counties_, shapes_]:=Map[\\n    Function[{shape},\\n        Check[Join[shape, SelectFirst[counties, sameCountyQ[#, shape] &]], shape]\\n    ],\\n    shapes\\n];\\n\\n\\n\\nGetResources[counties_]:=DeleteDuplicates[counties[[All, \\\"Resource\\\"]]]\\n\\nbilt[f_, p_, y_, pu_, du_, co2h_, co2t_, co2p_, co2c_, co2g_, ctf_, ctv_, cc_, cl_, co_, c_, od_, pc_]:= <|\\n        \\\"feedstock\\\" -> f,\\n        \\\"product\\\" -> p, \\n        \\\"conversion\\\" -> y,\\n        \\\"product units\\\" -> pu,\\n        \\\"demand units\\\" -> du,\\n        \\\"co2 harvesting\\\" -> co2h,\\n        \\\"co2 transportation\\\" -> co2t,\\n        \\\"co2 production\\\" -> co2p,\\n        \\\"co2 captured\\\" -> co2c,\\n        \\\"co2 gen used\\\" -> co2g,\\n        \\\"cost transportation fixed\\\" -> ctf,\\n        \\\"cost transportation variable\\\" -> ctv,\\n        \\\"cost capital\\\" -> cc,\\n        \\\"cost lifetime\\\" -> cl,\\n        \\\"cost operating\\\" -> co,\\n        \\\"capacity\\\" -> c,\\n        \\\"operating days\\\" -> od,\\n        \\\"production cost\\\" -> pc\\n    |>;\\n\\nloadBILT[] := Module[{d}, \\n    d = Import[FileNameJoin[{NotebookDirectory[], \\\"..\\\", \\\"data\\\",\\\"Example BILT biomass allocation calculation_220316.xlsx\\\"}], \\\"XLSX\\\"][[1]];\\n    Map[Apply[bilt, #] &, d[[4;;, 7;;24]]]\\n];\\n\\ntoTonnes = <|\\n    \\\"bu\\\" -> 56\/2205,\\n    \\\"lb\\\" -> 1\/2205,\\n    \\\"dt\\\" -> 1,\\n    \\\"null\\\" -> 0\\n|>;\\n\\n\\n\\n(* ::Section:: *)\\n(*Filter Functions*)\\n\\n\\nFilterCountiesRandomly[counties_, number_]:= RandomSample[counties, number]\\n\\nFilterSmallestCountiesBySize[counties_, max_]:=Select[counties, #[\\\"Production\\\"]*units[#[\\\"Production Unit\\\"]] <= max &];\\n\\nFilterLargestCountiesBySize[counties_, min_]:=Select[counties, #[\\\"Production\\\"]*units[#[\\\"Production Unit\\\"]] >= min &];\\n\\nFilterCountiesByProductionFraction[counties_, fraction_]:=Fold[\\n    Function[{all, next}, If[\\n         Total[all[[All, \\\"Production\\\"]]*(units \/@ all[[All, \\\"Production Unit\\\"]])] \/\\n    Total[counties[[All, \\\"Production\\\"]]*(units \/@ counties[[All, \\\"Production Unit\\\"]])] <= fraction,\\n    Append[all, next],\\n    all\\n    ]], \\n    {First@counties},\\n    Rest@counties\\n];\\n\\nFilterCountiesByResource[counties_, resource_String]:=Select[counties, #[\\\"Resource\\\"] === resource &];\\n\\n\\n\\n(* ::Section:: *)\\n(*Analyze Resources*)\\n\\n\\nfeedstockGroups = <|\\n    \\\"Wood\\\" -> {\\\"Pine\\\", \\\"Poplar\\\", \\\"Hardwood lowland residue\\\", \\\"Hardwood upland residue\\\", \\\"Softwood natural residue\\\", \\\"Softwood planted residue\\\", \\\"Mixedwood residue\\\", \\\"Msw wood\\\", \\\"Other forest residue\\\", \\\"Other forest thinnings\\\", \\\"Cd waste\\\", \\\"Willow\\\", \\\"Eucalyptus\\\"},\\n    \\\"Grass\\\" -> {\\\"Barley straw\\\", \\\"Wheat straw\\\"},\\n    \\\"Energy\\\" -> {\\\"Miscanthus\\\", \\\"Switchgrass\\\"},\\n    \\\"Residue\\\" -> {\\\"Corn stover\\\"},\\n    \\\"Sugars\\\" -> {\\\"Energy cane\\\"}\\n|>;\\nbiorefineryFeedstocks[b_]:=Select[feedstockGroups, MemberQ[#, b[\\\"feedstock\\\"]] &]\\n\\ngetAvailableFeedstock[counties_, feedstocks_ : {\\\"Barley straw\\\", \\\"Biomass sorghum\\\",\\n     \\\"Corn stover\\\", \\\"Energy cane\\\", \\\"Eucalyptus\\\", \\\"Hardwood lowland residue\\\",\\n     \\\"Miscanthus\\\", \\\"Pine\\\", \\\"Poplar\\\", \\\"Softwood natural residue\\\", \\\"Softwood planted residue\\\",\\n     \\\"Switchgrass\\\", \\\"Wheat straw\\\", \\\"Willow\\\"}] :=\\n    Module[{},\\n        GroupBy[Flatten[Table[{f, c[\\\"CountyG\\\"], c[f]}, {c, counties},\\n             {f, feedstocks}], 1], First, Total[#[[All, 3]]]&] \/\/\\n        Sort \/\/\\n        Reverse\\n    ]\\n\\n\\n(* ::Section:: *)\\n(*Biorefinery Assignment Section*)\\n\\n\\nAssignBiorefineriesRandomly[counties_, biorefineries_]:=Module[{biorefinery}, Table[\\n    biorefinery = RandomChoice[Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &]];\\n    Join[county, biorefinery],\\n    {county, counties}\\n]];\\n\\nAssignBiorefineriesByWeight[counties_, biorefineries_]:=Module[{allbiorefineries, biorefinery},\\n    Table[\\n        allbiorefineries = Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &];\\n        biorefinery = RandomChoice[allbiorefineries[[All, \\\"BiorefineryWeight\\\"]] -> allbiorefineries];\\n        Join[county, biorefinery],\\n        {county, counties}\\n]];\\n\\nAssignBiorefineriesByCost[counties_, biorefineries_]:=Table[\\n    allbiorefineries = Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &];\\n    byCosts = Map[{#, BiorefineryCountyCost[county, #]} &, allbiorefineries];\\n    Join[county, SortBy[byCosts, Last][[1, 1]]],\\n\\n    {county, counties}\\n];\\n\\nplotCounties[counties_, factor_]:=Module[{shps, rescaled, out},\\n    shps = LoadCountyGraphics[];\\n    rescaled = MapThread[Join[#1, <|\\\"output\\\" -> #2|>] &, {counties, Rescale[counties[[All, factor]]]}];\\n    out = Map[\\n        Function[{s}, Join[s, <|\\\"output\\\" -> SelectFirst[rescaled, sameCountyQ[#1, s] &, <|\\\"output\\\" -> 0|>][\\\"output\\\"]|>]], \\n        shps];\\n    Graphics[\\n        Flatten@Map[\\n            {ColorData[\\\"GreenBrownTerrain\\\"][#output], #[\\\"Graphics\\\"]} &,\\n            out\\n        ]\\n    ]\\n];\\n\\ngetCostsByCapacity[deployments_, biorefinery_, counties_List, max_:2*^6]:=Module[{sortedCountiesByDistance, gatheredBiomass},\\n    sortedCountiesByDistance = SortBy[counties, GeoDistance[Values@#[[{\\\"Lat\\\", \\\"Lon\\\"}]], Values@deployments[[{\\\"Lat\\\", \\\"Lon\\\"}]]] &];\\n    gatheredBiomass = gatherBiomass[{}, deployments, biorefinery, sortedCountiesByDistance, max];\\n    Table[\\n        totalBiomass = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        totalProduct = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"product units\\\"];\\n        collectionCosts = Total[gatheredBiomass[[1;;g, \\\"Collection Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        deliveryCosts = Total[gatheredBiomass[[1;;g, \\\"Delivery Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        capitalCosts = 0.13*biorefineryCost[totalBiomass, gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"capacity\\\"]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost capital\\\"]];\\n        operatingCosts = gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost operating\\\"];\\n        {\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], collectionCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], deliveryCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], operating\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], capitalCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], (collectionCosts + deliveryCosts + capitalCosts + operatingCosts)\/totalProduct}    \\n        },\\n        {g, Length@gatheredBiomass}\\n    ]\/\/ Transpose \/\/ AssociationThread[{\\n            \\\"Collection\\\",\\n            \\\"Delivery\\\",\\n            \\\"Operating\\\",\\n            \\\"Capital\\\",\\n            \\\"Total\\\"}->#]&\\n];\\n\\ngetLowestCostByCapacity[deployments_, biorefinery_, counties_List, max_:2*^6]:=Module[{sortedCountiesByDistance, gatheredBiomass},\\n    sortedCountiesByDistance = SortBy[counties, GeoDistance[Values@#[[{\\\"Lat\\\", \\\"Lon\\\"}]], Values@deployments[[{\\\"Lat\\\", \\\"Lon\\\"}]]] &];\\n    gatheredBiomass = gatherBiomass[{}, deployments, biorefinery, sortedCountiesByDistance, max];\\n    pastCost = 1*^9;\\n    optimalCapacity = 0;\\n    Table[\\n        totalBiomass = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        totalProduct = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"product units\\\"];\\n        collectionCosts = Total[gatheredBiomass[[1;;g, \\\"Collection Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        deliveryCosts = Total[gatheredBiomass[[1;;g, \\\"Delivery Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        capitalCosts = 0.13*biorefineryCost[totalBiomass, gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"capacity\\\"]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost capital\\\"]];\\n        operatingCosts = gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost operating\\\"];\\n        totalCost = (collectionCosts + deliveryCosts + capitalCosts + operatingCosts)\/totalProduct;\\n        If[totalCost > pastCost*1.10, optimalCost = pastCost; Return[];, pastCost = totalCost];\\n        {\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], collectionCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], deliveryCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], operating\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], capitalCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], totalCost}    \\n        },\\n        {g, Length@gatheredBiomass}\\n    ]\/\/ Transpose \/\/ AssociationThread[{\\n            \\\"Collection\\\",\\n            \\\"Delivery\\\",\\n            \\\"Operating\\\",\\n            \\\"Capital\\\",\\n            \\\"Total\\\"}->#]&\\n];\\n\\n\\n\\ntotalProduction[counties_]:=Total[counties[[All, \\\"Production\\\"]]*toTonnes\/@counties[[All, \\\"Production Unit\\\"]]];\\n\\ngetClusters[counties_, n_:30]:=Module[{},\\n    FindClusters[\\n        Values[counties[[All, {\\\"Lat\\\", \\\"Lon\\\", \\\"Production\\\"}]]] -> counties,\\n        n,\\n        \\\"Method\\\" -> \\\"KMeans\\\"\\n        ] \/\/ Map[Association, #,{2}] & \/\/\\n        SortBy[#, N@Mean[#[[All, \\\"Production\\\"]]] &] & \/\/ Reverse\\n];\\n\\n\\nbtToBilt = <|\\n    \\\"Corn\\\" -> {\\\"Corn stover\\\", \\\"AtJ-SPK\\\"}, \\n    \\\"Idle Land\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Barley\\\" -> {\\\"Barley straw\\\", \\\"AtJ-SPK\\\"},\\n    \\\"Soybeans\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Hay\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"}, \\n    \\\"Rice\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"},\\n    \\\"Pastureland available\\\" -> {\\\"\\\",\\\"\\\"},\\n    \\\"Cotton\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Wheat\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"}\\n|>;\\n\\n\\n\\n\\n\\n(* feedstockByWeight = SemanticImport[NotebookDirectory[] <> \\\"data\/feedstockWeights.csv\\\", {String, Real, Real, Real, Real, Real}, \\\"NamedRows\\\", Delimiters -> \\\",\\\"]; *)\\nfilterByFeedstockWeight[counties_, biorefineries_, s_, placed_]:=Module[{},\\n    largestResources = Select[feedstockByWeight[[All, \\\"Feedstock\\\"]], Total[counties[[All, #]]] > 50000 &];\\n\\n    choices = Flatten@Table[\\n        weights = Map[\\n            Function[{bio},\\n            SelectFirst[\\n                feedstockByWeight, \\n                #[\\\"Feedstock\\\"] == resource && KeyExistsQ[#, bio[\\\"product\\\"]]  &, <|bio[\\\"product\\\"] -> 0|>][bio[\\\"product\\\"]]], biorefineries];\\n\\n        RandomChoice[weights->biorefineries, 1],\\n        {resource, largestResources}\\n    ];\\n\\n    choices\\n];\\n\\n\\n\\n\\nfilterByWeights[counties_, biorefineries_, s_, placed_]:=Module[{},\\n    Break[]\\n]\\n\\nfilterBySmallestCost[counties_, biorefineries_, s_, placed_]:=TakeSmallestBy[\\n            Select[\\n                Association@Map[#->If[\\n                    KeyExistsQ[counties[[1]], #[\\\"feedstock\\\"]],\\n                    biorefineryCost[s, counties[[1;;2]], #],\\n                    {0, 1*^9}] &, biorefineries],\\n                    #[[1]] > 100 &]\\n                    , #[[2]] &, 1] \/\/ Keys \\n\\n\\n\\ncapitalCost[m_, m0_, c0_, n_:0.7, i_:0.13]:=i*c0*(m\/m0)^n\\ncollectionCost[m_, cf0_:3.103, cv0_, y0_:3200, f0_:0.6, t_:1.5]:=m*cf0 + m*cv0*t*Sqrt[m\/(Pi*y0*f0)]\\ndeliveryCost[m_, d_, d0_:25, c0_:0.71, m0_:2000*330, t_:1.5]:=t*m*c0*(d+5)\\noperatingCost[m_, m0_,o0_]:=o0*(m\/m0)\\nco2CaptureCost[co2_, co20_:5391.09, c0_:233.92, n_:0.61, op0_:0.064, i_:0.13]:=(1*^6*i*c0*(co2\/co20)^n + op0*co2)\\nco2CompressionCost[co2_, co20_:4848.94, c0_:30.38, n_:0.77, op0_:0.073, i_:0.13]:=(1*^6*i*c0*(co2\/co20)^n + op0*co2)\\nh2liquefactionCost[h2_, c0_:7.23, n_:0.8, op0_:8.763]:=(1*^6*c0*(h2)^n + op0*h2)\\n\\n\\n\\nbiorefineryCost[site_List, counties_, biorefinery_, capacity_?NumberQ]:=Module[{sortedCounties, costs, sites,m,  o, cap, c, d,p}, \\n    sortedCounties = SortBy[counties, (#[\\\"Lat\\\"]-site[[1]])^2+(#[\\\"Lon\\\"]-site[[2]])^2 &][[1;;UpTo@300]];\\n\\tcosts = costsBySite[site, sortedCounties, biorefinery, capacity, 0, {}];\\n\\tsites = costs[[All,1]];\\n\\tm = costs[[All,2]];\\n\\tp = Total[m]*biorefinery[\\\"conversion\\\"]+1.0;\\n\\to = operatingCost[capacity, 2000*330, biorefinery[\\\"cost operating\\\"]];\\n\\tcap = capitalCost[capacity, 2000*330, biorefinery[\\\"cost capital\\\"], 0.7,0.13 ];\\n    co2cap = co2CaptureCost[biorefinery[\\\"co2 captured\\\"]*p\/(330)];\\n    co2comp = co2CompressionCost[biorefinery[\\\"co2 captured\\\"]*p\/330];\\n    (* h2liquefaction = h2liquefactionCost[biorefinery[\\\"h2 liquefaction\\\"]*p]; *)\\n\\tc = Total@costs[[All,3]];\\n\\td = Total@costs[[All,4]];\\n\\n    {sites, m, (c+d+o+cap+co2cap+co2comp)\/p, c\/p, d\/p, o\/p,cap\/p,co2cap\/p,co2comp\/p}\\n];\\n\\ncostsBySite[site_List, counties_, biorefinery_Association,capacity_, gathered_, costs_]:=Module[{nearestCounty, availableFeedstock, newFeedstock, c, d, p},\\n\\tIf[(gathered >= capacity) || (counties == {}),\\n\\t\\tcosts,\\n\\t\\t\\n\\t\\tnearestCounty = First@counties;\\n\\t\\tavailableFeedstock = Total[Values@nearestCounty[[Flatten@Values@biorefineryFeedstocks[biorefinery]]]]+1.0;\\n\\t\\tnewFeedstock = If[gathered +availableFeedstock > capacity,  capacity-gathered, availableFeedstock];\\n\\t\\tc = collectionCost[newFeedstock, biorefinery[\\\"cost transportation fixed\\\"], biorefinery[\\\"cost transportation variable\\\"]];\\n\\t\\td = deliveryCost[newFeedstock, QuantityMagnitude@GeoDistance[site, Values[nearestCounty[[{\\\"Lat\\\", \\\"Lon\\\"}]]]]];\\n\\t\\tp = biorefinery[\\\"conversion\\\"]*(gathered + newFeedstock);\\n\\t\\tCheck[costsBySite[site, Rest@counties, biorefinery, capacity, gathered+newFeedstock, \\n\\t\\t\\tAppend[costs,\\n\\t\\t\\t{nearestCounty, newFeedstock,c,d}]],\\n            costs]\\n\\t]\\t\\n]\\n\\n\\nplotBiorefineryCostByCapacity[site_, counties_,biorefinery_, min_, max_]:=Module[{},\\n\\tListPlot[\\n\\t\\tTranspose@Table[\\n\\t\\t\\tTake[biorefineryCost[site, counties, biorefinery, x],{4,9}],\\n\\t\\t{x, min, max, 100000}],\\n\\t\\tPlotLabels -> {\\\"Collection\\\",\\\"Delivery\\\",\\\"Operating\\\",\\\"Capital\\\", \\\"CO2 Capture\\\", \\\"CO2 Compression\\\"},\\n\\t\\tPlotRange->All\\n\\t]\\n]\\n\\n\\n\\n\\n\\noptimalBiorefineryCapacityCost[site_List, counties0_, biorefinery_] :=\\n    Module[{f, result, sol},\\n        f[x0_?NumericQ] :=\\n            (\\n                result = biorefineryCost[site, counties0, biorefinery, x0];\\n                result[[3]]\\n            );\\n        sol = Quiet@FindMinimum[f[x1], {x1, 720000, 10000, 720000*6}];\\n        <|\\\"site\\\" -> site, \\n        \\\"counties\\\" -> result[[1]], \\n        \\\"Capacity\\\" -> Total[result[[2]]] \/ 330.0, \\n        \\\"Biofuel Cost\\\" -> result[[3]], \\n        \\\"Biofuel Out\\\" -> Total[result[[2]]]*biorefinery[\\\"conversion\\\"], \\\"Feedstock\\\" -> biorefinery[\\\"feedstock\\\"], \\n        \\\"Product\\\" -> biorefinery[\\\"product\\\"], \\\"Biorefinery\\\" -> biorefinery, \\\"CO2\\\" -> Total[result[[2]]]*biorefinery[\\\"co2 captured\\\"]|>\\n    ];\\n\\njetFuelFirst[counties_, biorefineries_, site_, placed_] :=\\n    Module[{},\\n        aviationBiorefineries = Select[placed, #[[\\\"Biorefinery\\\", \\\"product\\\"\\n            ]] == \\\"AtJ-SPK\\\"&];\\n        If[Total[330 * aviationBiorefineries[[All, \\\"Capacity\\\"]] * aviationBiorefineries\\n            [[All, \\\"Biorefinery\\\", \\\"conversion\\\"]]] < 650*^6,\\n            Select[biorefineries, (#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&]\\n            ,\\n            Select[biorefineries, !(#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&]\\n        ]\\n    ];\\n\\nfilterJetFuelFirstThenByWeight[counties_, biorefineries_, site_, placed_\\n    ] :=\\n    Module[{},\\n        aviationBiorefineries = Select[placed, #[[\\\"Biorefinery\\\", \\\"product\\\"\\n            ]] == \\\"AtJ-SPK\\\"&];\\n        If[Total[aviationBiorefineries[[All, \\\"Biofuel Out\\\"]]] < 650*^6,\\n            \\n            Select[biorefineries, (#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&]\\n            ,\\n            filterByFeedstockWeight[counties, Select[biorefineries, !\\n                (#[\\\"product\\\"] == \\\"AtJ-SPK\\\")&], site, placed]\\n        ]\\n    ];\\n\\nPlaceRefineries::usage = \\\"PlaceRefineries[counties, sites, filter, biorefineries] places biorefineries in sites, based on the counties and the filter. The filter is a function that takes the counties and biorefineries and returns, for example, the \\\\\\\"smallest cost\\\\\\\", \\\\\\\"random weight\\\\\\\", or \\\\\\\"smallest cost and random weight\\\\\\\". The result is an association of sites and the gathered results (counties, total capacity, cost, and biorefinery).\\\";\\n\\nPlaceRefineries[data_, sites_, filter_, biorefineries_, minCapacity_:\\n    30000] :=\\n    Module[{obc, nb},\\n        gs = {};\\n        results07 =\\n            Flatten[\\n                Table[\\n                    rs = Complement[data, Flatten[gs[[All, \\\"counties\\\"\\n                        ]]]];\\n                    ns = SortBy[rs, (#[\\\"Lat\\\"] - s[[1]]) ^ 2 + (#[\\\"Lon\\\"\\n                        ] - s[[2]]) ^ 2&];\\n                    nb = Take[ns, UpTo[25]];\\n                    If[Length @ nb > 0,\\n                        sb = filter[nb, biorefineries, s, gs];\\n                        Map[\\n                            (\\n                                obc = optimalBiorefineryCapacityCost[\\n                                    s, nb, #];\\n                                AppendTo[gs, obc];\\n                                obc\\n                            )&\\n                            ,\\n                            sb\\n                        ]\\n                        ,\\n                        {<|\\\"Capacity\\\" -> 0|>}\\n                    ]\\n                    ,\\n                    {s, sites}\\n                ]\\n                ,\\n                1\\n            ];\\n        Select[results07, #[[\\\"Capacity\\\"]] * 330 > minCapacity&]\\n    ];\\n\\ngatherBiomass[counties_, biorefinery_, n_:1, r0_:Infinity] :=\\n    Module[{m, p, r, gathered, site, sources, co2c},\\n        site = SpatialMedian[Values @ counties[[1 ;; n, {\\\"Lat\\\", \\\"Lon\\\"\\n            }]]];\\n        feedstocks = Values@biorefineryFeedstocks[biorefinery];\\n        sources = counties[[1 ;; n]];\\n        {m, r} = biorefineryCost[site, sources, biorefinery];\\n        co2c = m * biorefinery[\\\"co2 captured\\\"];\\n        p = m * biorefinery[\\\"conversion\\\"];\\n        gathered = <|\\\"site\\\" -> site, \\\"counties\\\" -> sources, \\\"Capacity\\\"\\n             -> m \/ 330.0, \\\"Biofuel Cost\\\" -> r, \\\"Product\\\" -> p, \\\"Biorefinery\\\" -> \\n            biorefinery, \\\"CO2\\\" -> co2c|>;\\n        If[And[r < 1.1 * r0, m < 4.5*^6, n < 20],\\n            gatherBiomass[counties, biorefinery, n + 1, r]\\n            ,\\n            gathered\\n        ]\\n    ];\\n\\n\\nGroupBiorefineriesBy[results_, category_, value_]:=GroupBy[results, \\n    #[\\\"Biorefinery\\\"][category] &,\\n    Map[\\n        GeoPosition[#[[\\\"site\\\"]]] -> #[value] &\\n    ]\\n]\\n\\nGroupBiorefineriesByTwo[results_, category1_, category2_, value_]:=GroupBy[results, \\n    {#[\\\"Biorefinery\\\"][category1], #[\\\"Biorefinery\\\"][category2]} &,\\n    Map[\\n        GeoPosition[#[[\\\"site\\\"]]] -> #[value] &\\n    ]\\n]\\n\\nSummarizeBiorefineriesBy[results_, category_, value_, function_]:= Map[\\n        function[#[[All, 2]]] &,\\n        GroupBiorefineriesBy[results, category, value]\\n    ];\\n\\nChartBiorefineriesBy[groups_]:=GeoBubbleChart[\\n    groups,\\n    GeoRange -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"],\\n    ChartStyle -> 2,\\n    BubbleSizes->{0.03, 0.1},\\n    ChartLegends -> {Placed[\\n        SwatchLegend[\\n            MapIndexed[ColorData[2][#2[[1]]] &, Keys@groups],\\n            Keys[groups],\\n            LegendLayout -> {\\\"Column\\\", 1},\\n            Background -> White,\\n            LegendFunction -> Frame,\\n            LegendLabel -> \\\"Group\\\",\\n            LabelStyle -> 20\\n        ], {0.9, 0.2}],\\n        Placed[\\n        PointLegend[\\n            {Gray, Gray, Gray},\\n            (NumberForm[#, {3,0}] &\/@{\\n                Min[Flatten@Values@groups[[All, All, 2]]],\\n                Median[Flatten@Values@groups[[All, All, 2]]],\\n                Max[Flatten@Values@groups[[All, All, 2]]]\\n            }),\\n            LegendLayout -> {\\\"Column\\\", 1},\\n            LegendMarkerSize -> {30, 50, 100},\\n            Background -> White,\\n            LegendFunction -> Frame,\\n            LegendLabel -> \\\"Capacity (MTPD)\\\",\\n            LabelStyle -> 20\\n        ], {0.1, 0.2}]},\\n    ImageSize -> 20*72\\n];\\n\\n\\npostResults[results_, label_]:= Module[{},\\n    byFeedstockCapacity  = GroupBiorefineriesBy[results, \\\"feedstock\\\", \\\"Capacity\\\"];\\n    byFeedstockCost = GroupBiorefineriesBy[results, \\\"feedstock\\\", \\\"Biofuel Cost\\\"];\\n    byProductCapacity = GroupBiorefineriesBy[results, \\\"product\\\", \\\"Capacity\\\"];\\n\\n    totalsByFeedstockCapacity = SummarizeBiorefineriesBy[results, \\\"feedstock\\\", \\\"Capacity\\\",  Total];\\n    meansByProductCost = SummarizeBiorefineriesBy[results, \\\"product\\\", \\\"Biofuel Cost\\\", Mean];\\n\\n    byFeedstockProductCapacity = GroupBiorefineriesByTwo[results, \\\"feedstock\\\", \\\"product\\\", \\\"Capacity\\\"];\\n\\n    KeyValueMap[\\n        Function[{k, v} , Flatten@{k, Min[v[[All, 2]]], Mean[v[[All, 2]]], Max[v[[All, 2]]]}], byFeedstockProductCapacity] \/\/ SortBy[Last] \/\/ Reverse \/\/ Grid;\\n\\n    DistributionChart[\\n        byProductCapacity[[All,All,2]],\\n        BarOrigin -> Left,\\n        ChartLabels -> KeyValueMap[Function[{k,v} , k <> \\\" (\\\" <> \\n        ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\n        \\\"\\\\[PlusMinus] \\\" <>  \\n        ToString[\\n        NumberForm[\\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\"], byProductCapacity],\\n        ChartElementFunction -> \\\"Quantile\\\",\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n        ImageSize -> 15*72\\n    ]  \/\/ Export[FileNameJoin[{NotebookDirectory[] , \\\"..\\\",  \\\"figures\\\" , label , \\\"_biorefinery_capacity_by_product_histogram.png\\\"}], #] &;\\n\\n    DistributionChart[\\n        byProductCapacity[[All, All, 2]],\\n        BarOrigin -> Left,\\n        ChartLabels -> KeyValueMap[Function[{k,v} , k <> \\\" (\\\" <> ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\\"\\\\[PlusMinus] \\\" <>  ToString[NumberForm[\\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\"], byProductCapacity],\\n        ChartElementFunction -> \\\"Quantile\\\",\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n        ImageSize -> 15*72\\n    ]  \/\/ Export[FileNameJoin[{NotebookDirectory[] , \\\"..\\\",  \\\"figures\\\" , label , \\\"_biorefinery_capacity_by_product_histogram.png\\\"}], #]  &;\\n\\n    plot1 = ChartBiorefineriesBy[byFeedstockCapacity];\\n    plot1 \/\/ Export[FileNameJoin[{NotebookDirectory[] , \\\"..\\\",  \\\"figures\\\" , label ,  \\\"_map_by_feedstock.png\\\"}], #] &;\\n    plot2 = ChartBiorefineriesBy[byProductCapacity];\\n    plot2  \/\/ EExport[FileNameJoin[{NotebookDirectory[] , \\\"..\\\",  \\\"figures\\\" , label ,  \\\"_map_by_fuel.png\\\"}], #] &;\\n\\n    grouped = GroupBy[results,\\n        #[\\\"Biorefinery\\\"][\\\"feedstock\\\"] &\\n    ];\\n\\n    g= KeyValueMap[\\n        Function[{k, v} ,\\n        ListPlot[\\n            v[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]],\\n            PlotLabel -> k,\\n            ImageSize -> 10*72\\n        ]],\\n        grouped\\n    ];\\n\\n\\n    grouped = GroupBy[\\n            results,\\n            #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n            #[[All, \\\"Capacity\\\"]] &\\n        ];\\n\\n    Histogram[\\n        grouped,\\n        ChartLegends -> SwatchLegend[\\n            Keys@grouped\\n        ],\\n        Frame -> True,\\n        FrameLabel -> {\\\"Capacity (MTPD)\\\", \\\"Biorefineries\\\"},\\n        ChartStyle -> 1,\\n        PlotRange -> {All, All},\\n        ImageSize -> 10*72\\n    ] \/\/ Export[FileNameJoin[{NotebookDirectory[] , \\\"..\\\",  \\\"figures\\\" , label ,  \\\"_capacity_histogram.png\\\"}], #] &;\\n\\n    byFeedstockProductCapacityCounts=Flatten[KeyValueMap[\\n        {StringRiffle[#1,\\\"-\\\"],\\n        HistogramList[\\n        #2[[All,2]],{{0,1000,2000,3000,4000,5000,10000,15000}}][[2]]}&,\\n        KeySort[byFeedstockProductCapacity]],{1}];\\n\\n    byFeedstockProductCapacityCountsSorted = SortBy[byFeedstockProductCapacityCounts, Total[#[[2]]]&];\\n    BarChart[\\n        byFeedstockProductCapacityCountsSorted[[All,2]],\\n        ChartLayout -> \\\"Stacked\\\",\\n        ChartLabels->{byFeedstockProductCapacityCountsSorted[[All,1]],None},\\n        BarOrigin->Left,\\n        Frame->True,\\n        FrameLabel->{None,\\\"Biorefinery Counts\\\"},\\n        ChartLegends->SwatchLegend[sizes[[1]],LegendLabel->\\\"Biorefinery\\\\nCapacities\\\\n(MTPD)\\\"],\\n        ImageSize->15*72\\n    ]\/\/ Export[FileNameJoin[{NotebookDirectory[] , \\\"..\\\",  \\\"figures\\\" , label ,  \\\"_capacity_counts.png\\\"}], #] &;\\n\\n    capByCost = GroupBy[\\n        results,\\n        #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n        #[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]] &\\n    ];\\n\\n    linearFits = Map[\\n        NonlinearModelFit[Select[Values@#1, #[[2]] < 30 &], a*x^(n-1), {a,n},x] &,\\n        capByCost\\n    ];\\n\\n    p1 = ListPlot[\\n        Values\/@capByCost,\\n        PlotLegends -> Automatic,\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", \\\"Biofuel Cost ($\/gallon)\\\"},\\n        LabelStyle -> 30,\\n        ImageSize -> 10*72\\n    ] ;\\n\\n    p2 = Plot[\\n            Evaluate@Table[l[x], {l, linearFits}],\\n            {x, 10, 1600},\\n            PlotStyle -> Dashed\\n        ];\\n\\n    Show@@{p1, p2}\\n\\n    \\n];\\n\\n\\n\\n\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/functions.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/functions.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"bilt",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/bilt.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"bilt = Import[NotebookDirectory[] <> \\\"Example BILT biomass allocation calculation_220316.xlsx\\\", \\\"XLSX\\\"][[1]];\\n\\nheaders = bilt[[2, 7;;]]\\nvalues = bilt[[4;;, 7;;]]\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/bilt.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/bilt.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"optimization",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/optimization.wl\"",
		"children":[],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"dist[f_, t_]:=EuclideanDistance[Values@iowaData[[f, {\\\"Lat\\\", \\\"Lon\\\"}]], Values@iowaData[[t, {\\\"Lat\\\", \\\"Lon\\\"}]]]\\n\\nvars = Flatten[\\n    {\\n        Element[biomass, Matrices[{5,5}, Reals]],\\n        Element[locs, Vectors[5, Integers]]\\n    }\\n]\\n\\nr = NMinimize[\\n    {\\n        Total@Flatten@Table[\\n            Indexed[locs, t]*Indexed[biomass, {f, t}]*dist[f, t],\\n            {f, 5}, {t, 5}],\\n        VectorLessEqual[{locs, 1}],\\n        VectorLessEqual[{0, locs}],\\n        Total[Table[Indexed[locs, t], {t, 5}]] == 1,\\n        Table[0 <= Indexed[biomass, {f, t}], {f, 5}, {t, 5}],\\n        Table[720000 <= Total[Flatten@Table[Indexed[locs, t]*Indexed[biomass, {f, t}], {f, 5}]], {t, 5}],\\n        VectorLessEqual[{biomass, 100000}],\\n        VectorLessEqual[{0, biomass}]\\n    },\\n    vars,\\n    Method -> \\\"NelderMead\\\"\\n]\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/optimization.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/code\/optimization.wl"
		},
		"collapsibleState":1
	}
]