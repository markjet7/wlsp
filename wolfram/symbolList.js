[
	{
		"name":"functions",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl\"",
		"children":[
			{
				"name":"GetResources",
				"kind":"Symbol",
				"definition":"GetResources[counties_]:=DeleteDuplicates[counties[[All, \"Resource\"]]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":60,
							"character":0
						},
						"end":{
							"line":60,
							"character":70
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[GetResources]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"FilterCountiesRandomly",
				"kind":"Symbol",
				"definition":"FilterCountiesRandomly[counties_, number_]:= RandomSample[counties, number]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":101,
							"character":0
						},
						"end":{
							"line":101,
							"character":75
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[FilterCountiesRandomly]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"filterByWeights",
				"kind":"Symbol",
				"definition":"filterByWeights[counties_, biorefineries_, s_, placed_]:=Module[{},\n    Break[]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":269,
							"character":0
						},
						"end":{
							"line":271,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[filterByWeights]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"filterBySmallestCost",
				"kind":"Symbol",
				"definition":"filterBySmallestCost[counties_, biorefineries_, s_, placed_]:=TakeSmallestBy[\n            Select[\n                Association@Map[#->If[\n                    KeyExistsQ[counties[[1]], #[\"feedstock\"]],\n                    biorefineryCost[s, counties[[1;;2]], #],\n                    {0, 1*^9}] &, biorefineries],\n                    #[[1]] > 100 &]\n                    , #[[2]] &, 1] \/\/ Keys",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":273,
							"character":0
						},
						"end":{
							"line":280,
							"character":42
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[filterBySmallestCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"capitalCost",
				"kind":"Symbol",
				"definition":"capitalCost[m_, m0_, c0_, n_:0.7, i_:0.13]:=i*c0*(m\/m0)^n",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":284,
							"character":0
						},
						"end":{
							"line":284,
							"character":57
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[capitalCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"collectionCost",
				"kind":"Symbol",
				"definition":"collectionCost[m_, cf0_:3.103, cv0_, y0_:3200, f0_:0.6, t_:1.5]:=m*cf0 + m*cv0*t*Sqrt[m\/(Pi*y0*f0)]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":285,
							"character":0
						},
						"end":{
							"line":285,
							"character":99
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[collectionCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"deliveryCost",
				"kind":"Symbol",
				"definition":"deliveryCost[m_, d_, d0_:25, c0_:0.71, m0_:2000*330, n_:1.5]:=m*c0*(d+5)*(m\/m0)^n",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":286,
							"character":0
						},
						"end":{
							"line":286,
							"character":81
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[deliveryCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"operatingCost",
				"kind":"Symbol",
				"definition":"operatingCost[m_, m0_,o0_]:=o0*(m\/m0)",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":287,
							"character":0
						},
						"end":{
							"line":287,
							"character":37
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[operatingCost]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"plotBiorefineryCostByCapacity",
				"kind":"Symbol",
				"definition":"plotBiorefineryCostByCapacity[site_, counties_,biorefinery_, min_, max_]:=Module[{},\n\tListPlot[\n\t\tTranspose@Table[\n\t\t\tTake[biorefineryCost[site, counties, biorefinery, x],{4,7}],\n\t\t{x, min, max,10000}],\n\t\tPlotLabels -> {\"Col\",\"Del\",\"Ope\",\"Cap\"},\n\t\tPlotRange->All\n\t]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":318,
							"character":0
						},
						"end":{
							"line":326,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[plotBiorefineryCostByCapacity]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"GroupBiorefineriesBy",
				"kind":"Symbol",
				"definition":"GroupBiorefineriesBy[results_, category_, value_]:=GroupBy[results, \n    #[\"Biorefinery\"][category] &,\n    Map[\n        GeoPosition[#[[\"site\"]]] -> #[value] &\n    ]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":420,
							"character":0
						},
						"end":{
							"line":425,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[GroupBiorefineriesBy]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"GroupBiorefineriesByTwo",
				"kind":"Symbol",
				"definition":"GroupBiorefineriesByTwo[results_, category1_, category2_, value_]:=GroupBy[results, \n    {#[\"Biorefinery\"][category1], #[\"Biorefinery\"][category2]} &,\n    Map[\n        GeoPosition[#[[\"site\"]]] -> #[value] &\n    ]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":427,
							"character":0
						},
						"end":{
							"line":432,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[GroupBiorefineriesByTwo]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"postResults",
				"kind":"Symbol",
				"definition":"postResults[results_, label_]:= Module[{},\n    byFeedstockCapacity  = GroupBiorefineriesBy[results, \"feedstock\", \"Capacity\"];\n    byFeedstockCost = GroupBiorefineriesBy[results, \"feedstock\", \"Biofuel Cost\"];\n    byProductCapacity = GroupBiorefineriesBy[results, \"product\", \"Capacity\"];\n\n    totalsByFeedstockCapacity = SummarizeBiorefineriesBy[results, \"feedstock\", \"Capacity\",  Total];\n    meansByProductCost = SummarizeBiorefineriesBy[results, \"product\", \"Biofuel Cost\", Mean];\n\n    byFeedstockProductCapacity = GroupBiorefineriesByTwo[results, \"feedstock\", \"product\", \"Capacity\"];\n\n    KeyValueMap[\n        {k, v} |-> Flatten@{k, Min[v[[All, 2]]], Mean[v[[All, 2]]], Max[v[[All, 2]]]}, byFeedstockProductCapacity] \/\/ SortBy[Last] \/\/ Reverse \/\/ Grid;\n\n    DistributionChart[\n        byProductCapacity[[All,All,2]],\n        BarOrigin -> Left,\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \" (\" <> \n        ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \n        \"\\[PlusMinus] \" <>  \n        ToString[\n        NumberForm[\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \")\", byProductCapacity],\n        ChartElementFunction -> \"Quantile\",\n        Frame -> True,\n        FrameLabel -> {\"Biorefinery Capacity (MTPD)\", None},\n        ImageSize -> 15*72\n    ]  \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_biorefinery_capacity_by_product_histogram.png\", #] &;\n\n    DistributionChart[\n        byProductCapacity[[All, All, 2]],\n        BarOrigin -> Left,\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \" (\" <> ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \"\\[PlusMinus] \" <>  ToString[NumberForm[\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \")\", byProductCapacity],\n        ChartElementFunction -> \"Quantile\",\n        Frame -> True,\n        FrameLabel -> {\"Biorefinery Capacity (MTPD)\", None},\n        ImageSize -> 15*72\n    ]  \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_biorefinery_capacity_by_product_histogram.png\", #] &;\n\n    plot1 = ChartBiorefineriesBy[byFeedstockCapacity];\n    plot1 \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_map_by_feedstock.png\", #] &;\n    plot2 = ChartBiorefineriesBy[byProductCapacity];\n    plot2  \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_map_by_fuel.png\", #] &;\n\n    grouped = GroupBy[results,\n        #[\"Biorefinery\"][\"feedstock\"] &\n    ];\n\n    g= KeyValueMap[\n        {k, v} |-> \n        ListPlot[\n            v[[All, {\"Capacity\", \"Biofuel Cost\"}]],\n            PlotLabel -> k,\n            ImageSize -> 10*72\n        ],\n        grouped\n    ];\n\n\n    grouped = GroupBy[\n            results,\n            #[\"Biorefinery\"][\"product\"] &,\n            #[[All, \"Capacity\"]] &\n        ];\n\n    Histogram[\n        grouped,\n        ChartLegends -> SwatchLegend[\n            Keys@grouped\n        ],\n        Frame -> True,\n        FrameLabel -> {\"Capacity (MTPD)\", \"Biorefineries\"},\n        ChartStyle -> 1,\n        PlotRange -> {All, All},\n        ImageSize -> 10*72\n    ] \/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_capacity_histogram.png\", #] &;\n\n    byFeedstockProductCapacityCounts=Flatten[KeyValueMap[\n        {StringRiffle[#1,\"-\"],\n        HistogramList[\n        #2[[All,2]],{{0,1000,2000,3000,4000,5000,10000,15000}}][[2]]}&,\n        KeySort[byFeedstockProductCapacity]],{1}];\n\n    byFeedstockProductCapacityCountsSorted = SortBy[byFeedstockProductCapacityCounts, Total[#[[2]]]&];\n    BarChart[\n        byFeedstockProductCapacityCountsSorted[[All,2]],\n        ChartLayout -> \"Stacked\",\n        ChartLabels->{byFeedstockProductCapacityCountsSorted[[All,1]],None},\n        BarOrigin->Left,\n        Frame->True,\n        FrameLabel->{None,\"Biorefinery Counts\"},\n        ChartLegends->SwatchLegend[sizes[[1]],LegendLabel->\"Biorefinery\\nCapacities\\n(MTPD)\"],\n        ImageSize->15*72\n    ]\/\/ Export[NotebookDirectory[] <> \"figures\/\" <> label <> \"_capacity_counts.png\", #] &;\n\n    capByCost = GroupBy[\n        results,\n        #[\"Biorefinery\"][\"product\"] &,\n        #[[All, {\"Capacity\", \"Biofuel Cost\"}]] &\n    ];\n\n    linearFits = Map[\n        NonlinearModelFit[Select[Values@#1, #[[2]] < 30 &], a*x^(n-1), {a,n},x] &,\n        capByCost\n    ];\n\n    p1 = ListPlot[\n        Values\/@capByCost,\n        PlotLegends -> Automatic,\n        Frame -> True,\n        FrameLabel -> {\"Biorefinery Capacity (MTPD)\", \"Biofuel Cost ($\/gallon)\"},\n        LabelStyle -> 30,\n        ImageSize -> 10*72\n    ] ;\n\n    p2 = Plot[\n            Evaluate@Table[l[x], {l, linearFits}],\n            {x, 10, 1600},\n            PlotStyle -> Dashed\n        ];\n\n    Show@@{p1, p2}\n\n    \n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl",
					"range":{
						"start":{
							"line":473,
							"character":0
						},
						"end":{
							"line":597,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[postResults]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"(* ::Package:: *)\\n\\nsameCountyQ[c_, s_]:=(c[\\\"County\\\"] == (s[\\\"CountyG\\\"]) && c[\\\"State\\\"] == s[\\\"StateG\\\"]);\\n\\nLoadCountyCSV[]:=Import[NotebookDirectory[] <> FileNameJoin[{\\\"data\\\",\\\"billionton_county_download20211119-044647.csv\\\", \\\"billionton_county_download20211119-044647.csv\\\"}], \\\"CSV\\\"] \/\/ \\n    Map[Function[{row}, AssociationThread[First@# -> row] ], Rest@#] &;\\n\\nLoadCountyCSV[filter_]:=LoadCountyCSV[] \/\/ filter;\\n\\nLoadCountyGraphics[]:= Function[{shpfile},MapThread[\\n        <|\\\"CountyG\\\" -> #1, \\\"StateG\\\" -> #2, \\\"Lat\\\" -> #3, \\\"Lon\\\" -> #4, \\\"Graphics\\\" -> #5|> &,\\n        {\\n            First@(\\\"COUNTY\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"STATE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"LATITUDE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"LONGITUDE\\\" \/. (\\\"LabeledData\\\" \/. shpfile)),\\n            First@(\\\"Geometry\\\" \/. shpfile)\\n        }\\n    ]][Import[NotebookDirectory[] <> \\\"data\/agmap\/agmap.shp\\\", {\\\"SHP\\\", \\\"Data\\\"}]];\\n\\nLoadCountyGraphics[filter_]:= LoadCountyGraphics[] \/\/ filter;\\n\\nLoadCountyDataGraphics[]:= MergeCountyDataGraphics[\\n    LoadCountyCSV[],\\n    LoadCountyGraphics[]\\n];\\n\\nLoadCountyDataGraphics[countyFilter_, graphicsFilter_]:= MergeCountyDataGraphics[\\n    LoadCountyCSV[countyFilter],\\n    LoadCountyGraphics[graphicsFilter]\\n];\\n\\nLoadCachedData[] :=Import[NotebookDirectory[] <> \\\"data\/county_data.mx\\\"];\\n\\nSaveCountyDataGraphics[]:= Export[NotebookDirectory[]<>\\\"data\/county_data.mx\\\", Select[LoadCountyDataGraphics[], KeyExistsQ[#, \\\"Resource\\\"] &], \\\"WXF\\\"];\\n\\nSaveFullCountyDataGraphics[]:=Module[{data, data2, files, db},\\n    data = Select[LoadCountyDataGraphics[], KeyExistsQ[#, \\\"Resource\\\"] &];\\n    files = FileNames[\\\"*.csv\\\", NotebookDirectory[] <> \\\"data\/billion_ton\\\"];\\n    db = <|StringTake[FileBaseName[#], {17,-1}] -> Import[#, \\\"CSV\\\"] &\/@ files|>;\\n    data2 = Table[\\n        Table[\\n            row[feed \/\/ StringReplace[{\\\"_\\\" -> \\\" \\\"}] \/\/ StringReplace[{x_~~y___:>ToUpperCase@x <> y}]] = SelectFirst[db[feed], #[[3]] == row[\\\"County\\\"] && #[[2]] == row[\\\"StateFull\\\"] &, {0, 0, 0, 0}][[4]],\\n            {feed, Keys@db}\\n        ];\\n        row,\\n        {row, data}\\n    ];\\n    Export[NotebookDirectory[] <> \\\"data\/full_county_data.mx\\\", data2, \\\"WXF\\\"];\\n];\\n\\nMergeCountyDataGraphics[counties_, shapes_]:=Map[\\n    Function[{shape},\\n        Check[Join[shape, SelectFirst[counties, sameCountyQ[#, shape] &]], shape]\\n    ],\\n    shapes\\n];\\n\\n\\n\\nGetResources[counties_]:=DeleteDuplicates[counties[[All, \\\"Resource\\\"]]]\\n\\nbilt[f_, p_, y_, pu_, du_, co2h_, co2t_, co2p_, co2c_, co2g_, ctf_, ctv_, cc_, cl_, co_, c_, od_, pc_]:= <|\\n        \\\"feedstock\\\" -> f,\\n        \\\"product\\\" -> p, \\n        \\\"conversion\\\" -> y,\\n        \\\"product units\\\" -> pu,\\n        \\\"demand units\\\" -> du,\\n        \\\"co2 harvesting\\\" -> co2h,\\n        \\\"co2 transportation\\\" -> co2t,\\n        \\\"co2 production\\\" -> co2p,\\n        \\\"co2 captured\\\" -> co2c,\\n        \\\"co2 gen used\\\" -> co2g,\\n        \\\"cost transportation fixed\\\" -> ctf,\\n        \\\"cost transportation variable\\\" -> ctv,\\n        \\\"cost capital\\\" -> cc,\\n        \\\"cost lifetime\\\" -> cl,\\n        \\\"cost operating\\\" -> co,\\n        \\\"capacity\\\" -> c,\\n        \\\"operating days\\\" -> od,\\n        \\\"production cost\\\" -> pc\\n    |>;\\n\\nloadBILT[] := Module[{d}, \\n    d = Import[NotebookDirectory[] <> \\\"data\/Example BILT biomass allocation calculation_220316.xlsx\\\", \\\"XLSX\\\"][[1]];\\n    Map[Apply[bilt, #] &, d[[4;;, 7;;24]]]\\n];\\n\\ntoTonnes = <|\\n    \\\"bu\\\" -> 56\/2205,\\n    \\\"lb\\\" -> 1\/2205,\\n    \\\"dt\\\" -> 1,\\n    \\\"null\\\" -> 0\\n|>;\\n\\n\\n\\n(* ::Section:: *)\\n(*Filter Functions*)\\n\\n\\nFilterCountiesRandomly[counties_, number_]:= RandomSample[counties, number]\\n\\nFilterSmallestCountiesBySize[counties_, max_]:=Select[counties, #[\\\"Production\\\"]*units[#[\\\"Production Unit\\\"]] <= max &];\\n\\nFilterLargestCountiesBySize[counties_, min_]:=Select[counties, #[\\\"Production\\\"]*units[#[\\\"Production Unit\\\"]] >= min &];\\n\\nFilterCountiesByProductionFraction[counties_, fraction_]:=Fold[\\n    {all, next} |-> If[\\n         Total[all[[All, \\\"Production\\\"]]*(units \/@ all[[All, \\\"Production Unit\\\"]])] \/\\n    Total[counties[[All, \\\"Production\\\"]]*(units \/@ counties[[All, \\\"Production Unit\\\"]])] <= fraction,\\n    Append[all, next],\\n    all\\n    ], \\n    {First@counties},\\n    Rest@counties\\n];\\n\\nFilterCountiesByResource[counties_, resource_String]:=Select[counties, #[\\\"Resource\\\"] === resource &];\\n\\n\\n\\n(* ::Section:: *)\\n(*Biorefinery Assignment Section*)\\n\\n\\nAssignBiorefineriesRandomly[counties_, biorefineries_]:=Module[{biorefinery}, Table[\\n    biorefinery = RandomChoice[Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &]];\\n    Join[county, biorefinery],\\n    {county, counties}\\n]];\\n\\nAssignBiorefineriesByWeight[counties_, biorefineries_]:=Module[{allbiorefineries, biorefinery},\\n    Table[\\n        allbiorefineries = Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &];\\n        biorefinery = RandomChoice[allbiorefineries[[All, \\\"BiorefineryWeight\\\"]] -> allbiorefineries];\\n        Join[county, biorefinery],\\n        {county, counties}\\n]];\\n\\nAssignBiorefineriesByCost[counties_, biorefineries_]:=Table[\\n    allbiorefineries = Select[biorefineries, #BiorefineryFeedstock === county[\\\"Resource\\\"] &];\\n    byCosts = Map[{#, BiorefineryCountyCost[county, #]} &, allbiorefineries];\\n    Join[county, SortBy[byCosts, Last][[1, 1]]],\\n\\n    {county, counties}\\n];\\n\\nplotCounties[counties_, factor_]:=Module[{shps, rescaled, out},\\n    shps = LoadCountyGraphics[];\\n    rescaled = MapThread[Join[#1, <|\\\"output\\\" -> #2|>] &, {counties, Rescale[counties[[All, factor]]]}];\\n    out = Map[\\n        s |-> Join[s, <|\\\"output\\\" -> SelectFirst[rescaled, sameCountyQ[#1, s] &, <|\\\"output\\\" -> 0|>][\\\"output\\\"]|>], \\n        shps];\\n    Graphics[\\n        Flatten@Map[\\n            {ColorData[\\\"GreenBrownTerrain\\\"][#output], #[\\\"Graphics\\\"]} &,\\n            out\\n        ]\\n    ]\\n];\\n\\ngetCostsByCapacity[deployments_, biorefinery_, counties_List, max_:2*^6]:=Module[{sortedCountiesByDistance, gatheredBiomass},\\n    sortedCountiesByDistance = SortBy[counties, GeoDistance[Values@#[[{\\\"Lat\\\", \\\"Lon\\\"}]], Values@deployments[[{\\\"Lat\\\", \\\"Lon\\\"}]]] &];\\n    gatheredBiomass = gatherBiomass[{}, deployments, biorefinery, sortedCountiesByDistance, max];\\n    Table[\\n        totalBiomass = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        totalProduct = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"product units\\\"];\\n        collectionCosts = Total[gatheredBiomass[[1;;g, \\\"Collection Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        deliveryCosts = Total[gatheredBiomass[[1;;g, \\\"Delivery Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        capitalCosts = 0.13*biorefineryCost[totalBiomass, gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"capacity\\\"]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost capital\\\"]];\\n        operatingCosts = gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost operating\\\"];\\n        {\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], collectionCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], deliveryCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], operating\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], capitalCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], (collectionCosts + deliveryCosts + capitalCosts + operatingCosts)\/totalProduct}    \\n        },\\n        {g, Length@gatheredBiomass}\\n    ]\/\/ Transpose \/\/ AssociationThread[{\\n            \\\"Collection\\\",\\n            \\\"Delivery\\\",\\n            \\\"Operating\\\",\\n            \\\"Capital\\\",\\n            \\\"Total\\\"}->#]&\\n];\\n\\ngetLowestCostByCapacity[deployments_, biorefinery_, counties_List, max_:2*^6]:=Module[{sortedCountiesByDistance, gatheredBiomass},\\n    sortedCountiesByDistance = SortBy[counties, GeoDistance[Values@#[[{\\\"Lat\\\", \\\"Lon\\\"}]], Values@deployments[[{\\\"Lat\\\", \\\"Lon\\\"}]]] &];\\n    gatheredBiomass = gatherBiomass[{}, deployments, biorefinery, sortedCountiesByDistance, max];\\n    pastCost = 1*^9;\\n    optimalCapacity = 0;\\n    Table[\\n        totalBiomass = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        totalProduct = Total[gatheredBiomass[[1;;g, \\\"Biomass\\\"]]]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"product units\\\"];\\n        collectionCosts = Total[gatheredBiomass[[1;;g, \\\"Collection Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        deliveryCosts = Total[gatheredBiomass[[1;;g, \\\"Delivery Cost\\\"]]*gatheredBiomass[[1;;g, \\\"Biomass\\\"]]];\\n        capitalCosts = 0.13*biorefineryCost[totalBiomass, gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"capacity\\\"]*gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost capital\\\"]];\\n        operatingCosts = gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"cost operating\\\"];\\n        totalCost = (collectionCosts + deliveryCosts + capitalCosts + operatingCosts)\/totalProduct;\\n        If[totalCost > pastCost*1.10, optimalCost = pastCost; Return[];, pastCost = totalCost];\\n        {\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], collectionCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], deliveryCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], operating\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], capitalCosts\/totalProduct},\\n            {totalBiomass\/ gatheredBiomass[[g]][\\\"Biorefinery\\\"][\\\"operating days\\\"], totalCost}    \\n        },\\n        {g, Length@gatheredBiomass}\\n    ]\/\/ Transpose \/\/ AssociationThread[{\\n            \\\"Collection\\\",\\n            \\\"Delivery\\\",\\n            \\\"Operating\\\",\\n            \\\"Capital\\\",\\n            \\\"Total\\\"}->#]&\\n];\\n\\n\\n\\ntotalProduction[counties_]:=Total[counties[[All, \\\"Production\\\"]]*toTonnes\/@counties[[All, \\\"Production Unit\\\"]]];\\n\\ngetClusters[counties_, n_:30]:=Module[{},\\n    FindClusters[\\n        Values[counties[[All, {\\\"Lat\\\", \\\"Lon\\\", \\\"Production\\\"}]]] -> counties,\\n        n,\\n        \\\"Method\\\" -> \\\"KMeans\\\"\\n        ] \/\/ Map[Association, #,{2}] & \/\/\\n        SortBy[#, N@Mean[#[[All, \\\"Production\\\"]]] &] & \/\/ Reverse\\n];\\n\\n\\nbtToBilt = <|\\n    \\\"Corn\\\" -> {\\\"Corn stover\\\", \\\"AtJ-SPK\\\"}, \\n    \\\"Idle Land\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Barley\\\" -> {\\\"Barley straw\\\", \\\"AtJ-SPK\\\"},\\n    \\\"Soybeans\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Hay\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"}, \\n    \\\"Rice\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"},\\n    \\\"Pastureland available\\\" -> {\\\"\\\",\\\"\\\"},\\n    \\\"Cotton\\\" -> {\\\"\\\",\\\"\\\"}, \\n    \\\"Wheat\\\" -> {\\\"Wheat straw\\\", \\\"FT-SPK\\\"}\\n|>;\\n\\n\\n\\n\\n\\nfeedstockByWeight = SemanticImport[NotebookDirectory[] <> \\\"data\/feedstockWeights.csv\\\", {String, Real, Real, Real, Real, Real}, \\\"NamedRows\\\", Delimiters -> \\\",\\\"];\\nfilterByFeedstockWeight[counties_, biorefineries_, s_, placed_]:=Module[{},\\n    largestResources = Select[feedstockByWeight[[All, \\\"Feedstock\\\"]], Total[counties[[All, #]]] > 50000 &];\\n\\n    choices = Flatten@Table[\\n        weights = Map[\\n            bio |->\\n            SelectFirst[\\n                feedstockByWeight, \\n                #[\\\"Feedstock\\\"] == resource && KeyExistsQ[#, bio[\\\"product\\\"]]  &, <|bio[\\\"product\\\"] -> 0|>][bio[\\\"product\\\"]], biorefineries];\\n\\n        RandomChoice[weights->biorefineries, 1],\\n        {resource, largestResources}\\n    ];\\n\\n    choices\\n];\\n\\n\\n\\n\\nfilterByWeights[counties_, biorefineries_, s_, placed_]:=Module[{},\\n    Break[]\\n]\\n\\nfilterBySmallestCost[counties_, biorefineries_, s_, placed_]:=TakeSmallestBy[\\n            Select[\\n                Association@Map[#->If[\\n                    KeyExistsQ[counties[[1]], #[\\\"feedstock\\\"]],\\n                    biorefineryCost[s, counties[[1;;2]], #],\\n                    {0, 1*^9}] &, biorefineries],\\n                    #[[1]] > 100 &]\\n                    , #[[2]] &, 1] \/\/ Keys \\n\\n\\n\\ncapitalCost[m_, m0_, c0_, n_:0.7, i_:0.13]:=i*c0*(m\/m0)^n\\ncollectionCost[m_, cf0_:3.103, cv0_, y0_:3200, f0_:0.6, t_:1.5]:=m*cf0 + m*cv0*t*Sqrt[m\/(Pi*y0*f0)]\\ndeliveryCost[m_, d_, d0_:25, c0_:0.71, m0_:2000*330, n_:1.5]:=m*c0*(d+5)*(m\/m0)^n\\noperatingCost[m_, m0_,o0_]:=o0*(m\/m0)\\n\\n\\nbiorefineryCost[site_List, counties_, biorefinery_, capacity_?NumberQ]:=Module[{(*p, c, d, o, cap, m, distances,*)sortedCounties(*, neededCounties*)}, \\n    m = capacity;\\n    sortedCounties = SortBy[counties, (#[\\\"Lat\\\"]-site[[1]])^2+(#[\\\"Lon\\\"]-site[[2]])^2 &];\\n    neededCounties = Take[sortedCounties,{1,UpTo@(Length[\\n        TakeWhile[\\n        Transpose[{sortedCounties, Accumulate[counties[[All, biorefinery[\\\"feedstock\\\"]]]]}],\\n        #[[2]] < capacity &]]+1)}];\\n    If[Length@neededCounties > 1,\\n        distances = QuantityMagnitude@GeoDistance[site, Values@#] & \/@ neededCounties[[All, {\\\"Lat\\\", \\\"Lon\\\"}]];\\n        d = Total@Append[\\n                MapThread[\\n                    deliveryCost[#1, #2] &, \\n                    {Most@sortedCounties[[1;;Length@distances, biorefinery[\\\"feedstock\\\"]]], Most@distances}],\\n                \\n                deliveryCost[\\n                    (m - Total[Most@sortedCounties[[1;;Length@distances, biorefinery[\\\"feedstock\\\"]]]] \/. {x_\/;x<0->m}), \\n                    distances[[-1]]]\\n            ];,\\n        distances = QuantityMagnitude@GeoDistance[site, Values@neededCounties[[1, {\\\"Lat\\\", \\\"Lon\\\"}]]];\\n        d = deliveryCost[m, distances];\\n    ];\\n    p = biorefinery[\\\"conversion\\\"]*m;\\n    c = Total@Map[collectionCost[#1[biorefinery[\\\"feedstock\\\"]], biorefinery[\\\"cost transportation fixed\\\"], biorefinery[\\\"cost transportation variable\\\"]] &, neededCounties];\\n    o = operatingCost[m, 2000*330, biorefinery[\\\"cost operating\\\"]];\\n    cap = capitalCost[m, 2000*330, biorefinery[\\\"cost capital\\\"], 0.7, 0.13];\\n    {neededCounties, m, (c + d + o + cap)\/p, c\/p, d\/p, o\/p, cap\/p}\\n];\\n\\nplotBiorefineryCostByCapacity[site_, counties_,biorefinery_, min_, max_]:=Module[{},\\n\\tListPlot[\\n\\t\\tTranspose@Table[\\n\\t\\t\\tTake[biorefineryCost[site, counties, biorefinery, x],{4,7}],\\n\\t\\t{x, min, max,10000}],\\n\\t\\tPlotLabels -> {\\\"Col\\\",\\\"Del\\\",\\\"Ope\\\",\\\"Cap\\\"},\\n\\t\\tPlotRange->All\\n\\t]\\n]\\n\\n\\noptimalBiorefineryCapacityCost[site_, counties0_, b_]:=Module[{f, result, sol},\\n    f[x0_?NumericQ]:=(\\n        result = biorefineryCost[site, counties0, b, x0];\\n        result[[3]]\\n    );\\n\\n    sol = Quiet@FindMinimum[\\n        f[x1],\\n        {x1, 720000, 10000, 720000*3}\\n    ];\\n\\n\\t<|\\n        \\\"site\\\" -> site,\\n        \\\"counties\\\" -> result[[1]],\\n        \\\"Capacity\\\" -> result[[2]]\/330.0,\\n        \\\"Biofuel Cost\\\" -> result[[3]],\\n        \\\"Biofuel Out\\\" -> result[[2]]*b[\\\"conversion\\\"],\\n        \\\"Feedstock\\\" -> b[\\\"feedstock\\\"],\\n        \\\"Product\\\" -> b[\\\"product\\\"],\\n        \\\"Biorefinery\\\" -> b,\\n        \\\"CO2\\\" -> result[[2]]*b[\\\"co2 captured\\\"]\\n    |>\\n];\\n\\njetFuelFirst[counties_, biorefineries_, site_, placed_]:=Module[{},\\n    aviationBiorefineries = Select[placed, #[[\\\"Biorefinery\\\", \\\"product\\\"]] == \\\"AtJ-SPK\\\" &];\\n    If[\\n        Total[330*aviationBiorefineries[[All, \\\"Capacity\\\"]]*aviationBiorefineries[[All, \\\"Biorefinery\\\", \\\"conversion\\\"]]] < 650*^6,\\n        Select[biorefineries, (#[\\\"product\\\"] == \\\"AtJ-SPK\\\") &],\\n        Select[biorefineries, !(#[\\\"product\\\"] == \\\"AtJ-SPK\\\") &]\\n    ]\\n];\\n\\nfilterJetFuelFirstThenByWeight[counties_, biorefineries_, site_, placed_]:=Module[{},\\n    aviationBiorefineries = Select[placed, #[[\\\"Biorefinery\\\", \\\"product\\\"]] == \\\"AtJ-SPK\\\" &];\\n    If[\\n        Total[aviationBiorefineries[[All, \\\"Biofuel Out\\\"]]] < 650*^6,\\n        Select[biorefineries, (#[\\\"product\\\"] == \\\"AtJ-SPK\\\") &],\\n        filterByFeedstockWeight[\\n            counties, \\n            Select[biorefineries, !(#[\\\"product\\\"] == \\\"AtJ-SPK\\\") &], \\n            site, \\n            placed]\\n    ]\\n];\\n\\nPlaceRefineries::usage = \\\"PlaceRefineries[counties, sites, filter, biorefineries] places biorefineries in sites, based on the counties and the filter. The filter is a function that takes the counties and biorefineries and returns, for example, the \\\\\\\"smallest cost\\\\\\\", \\\\\\\"random weight\\\\\\\", or \\\\\\\"smallest cost and random weight\\\\\\\". The result is an association of sites and the gathered results (counties, total capacity, cost, and biorefinery).\\\";\\nPlaceRefineries[data_, sites_, filter_, biorefineries_, minCapacity_:30000]:=Module[{obc},\\n        gs = {};\\n        results07 = Flatten[Table[\\n            rs = Complement[data, Flatten[gs[[All, \\\"counties\\\"]]]];\\n            ns = SortBy[rs, (#[\\\"Lat\\\"]-s[[1]])^2+(#[\\\"Lon\\\"]-s[[2]])^2 &];\\n            nb = Take[ns, UpTo[25]];\\n            If[Length@nb > 0,\\n                sb = filter[nb, biorefineries, s, gs];\\n                Map[\\n                    (obc = optimalBiorefineryCapacityCost[s, nb, #];\\n                    AppendTo[gs, obc];\\n                    obc) &,\\n                    sb\\n                ],\\n            {<|\\\"Capacity\\\" -> 0|>}],\\n            {s, sites}\\n        ], 1];\\n        Select[results07, #[[\\\"Capacity\\\"]]*330 > minCapacity &]\\n];\\n\\ngatherBiomass[counties_, biorefinery_, n_:1, r0_:Infinity]:=Module[{m, p, r, gathered, site, sources, co2c},\\n    site = SpatialMedian[Values@counties[[1;;n, {\\\"Lat\\\",\\\"Lon\\\"}]]];\\n    sources = Select[counties[[1;;n]], KeyExistsQ[#,biorefinery[\\\"feedstock\\\"]] &];\\n    {m, r} = biorefineryCost[site, sources, biorefinery];\\n    co2c = m*biorefinery[\\\"co2 captured\\\"];\\n    p = m*biorefinery[\\\"conversion\\\"];\\n    \\n    gathered = <|\\n        \\\"site\\\" -> site,\\n        \\\"counties\\\" -> sources,\\n        \\\"Capacity\\\" -> m\/330.0,\\n        \\\"Biofuel Cost\\\" -> r,\\n        \\\"Product\\\" -> p,\\n        \\\"Biorefinery\\\" -> biorefinery,\\n        \\\"CO2\\\" -> co2c\\n    |>;\\n\\n    If[And[r < 1.1*r0, m < 4.5*^6, n < 20],\\n        gatherBiomass[counties, biorefinery, n+1, r],\\n        gathered\\n    ]\\n];\\n\\n\\nGroupBiorefineriesBy[results_, category_, value_]:=GroupBy[results, \\n    #[\\\"Biorefinery\\\"][category] &,\\n    Map[\\n        GeoPosition[#[[\\\"site\\\"]]] -> #[value] &\\n    ]\\n]\\n\\nGroupBiorefineriesByTwo[results_, category1_, category2_, value_]:=GroupBy[results, \\n    {#[\\\"Biorefinery\\\"][category1], #[\\\"Biorefinery\\\"][category2]} &,\\n    Map[\\n        GeoPosition[#[[\\\"site\\\"]]] -> #[value] &\\n    ]\\n]\\n\\nSummarizeBiorefineriesBy[results_, category_, value_, function_]:= Map[\\n        function[#[[All, 2]]] &,\\n        GroupBiorefineriesBy[results, category, value]\\n    ];\\n\\nChartBiorefineriesBy[groups_]:=GeoBubbleChart[\\n    groups,\\n    GeoRange -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"],\\n    ChartStyle -> 2,\\n    BubbleSizes->{0.03, 0.1},\\n    ChartLegends -> {Placed[\\n        SwatchLegend[\\n            MapIndexed[ColorData[2][#2[[1]]] &, Keys@groups],\\n            Keys[groups],\\n            LegendLayout -> {\\\"Column\\\", 1},\\n            Background -> White,\\n            LegendFunction -> Frame,\\n            LegendLabel -> \\\"Group\\\",\\n            LabelStyle -> 20\\n        ], {0.9, 0.2}],\\n        Placed[\\n        PointLegend[\\n            {Gray, Gray, Gray},\\n            (NumberForm[#, {3,0}] &\/@{\\n                Min[Flatten@Values@groups[[All, All, 2]]],\\n                Median[Flatten@Values@groups[[All, All, 2]]],\\n                Max[Flatten@Values@groups[[All, All, 2]]]\\n            }),\\n            LegendLayout -> {\\\"Column\\\", 1},\\n            LegendMarkerSize -> {30, 50, 100},\\n            Background -> White,\\n            LegendFunction -> Frame,\\n            LegendLabel -> \\\"Capacity (MTPD)\\\",\\n            LabelStyle -> 20\\n        ], {0.1, 0.2}]},\\n    ImageSize -> 20*72\\n];\\n\\n\\npostResults[results_, label_]:= Module[{},\\n    byFeedstockCapacity  = GroupBiorefineriesBy[results, \\\"feedstock\\\", \\\"Capacity\\\"];\\n    byFeedstockCost = GroupBiorefineriesBy[results, \\\"feedstock\\\", \\\"Biofuel Cost\\\"];\\n    byProductCapacity = GroupBiorefineriesBy[results, \\\"product\\\", \\\"Capacity\\\"];\\n\\n    totalsByFeedstockCapacity = SummarizeBiorefineriesBy[results, \\\"feedstock\\\", \\\"Capacity\\\",  Total];\\n    meansByProductCost = SummarizeBiorefineriesBy[results, \\\"product\\\", \\\"Biofuel Cost\\\", Mean];\\n\\n    byFeedstockProductCapacity = GroupBiorefineriesByTwo[results, \\\"feedstock\\\", \\\"product\\\", \\\"Capacity\\\"];\\n\\n    KeyValueMap[\\n        {k, v} |-> Flatten@{k, Min[v[[All, 2]]], Mean[v[[All, 2]]], Max[v[[All, 2]]]}, byFeedstockProductCapacity] \/\/ SortBy[Last] \/\/ Reverse \/\/ Grid;\\n\\n    DistributionChart[\\n        byProductCapacity[[All,All,2]],\\n        BarOrigin -> Left,\\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \\\" (\\\" <> \\n        ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\n        \\\"\\\\[PlusMinus] \\\" <>  \\n        ToString[\\n        NumberForm[\\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\", byProductCapacity],\\n        ChartElementFunction -> \\\"Quantile\\\",\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n        ImageSize -> 15*72\\n    ]  \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_biorefinery_capacity_by_product_histogram.png\\\", #] &;\\n\\n    DistributionChart[\\n        byProductCapacity[[All, All, 2]],\\n        BarOrigin -> Left,\\n        ChartLabels -> KeyValueMap[{k,v} |-> k <> \\\" (\\\" <> ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\\"\\\\[PlusMinus] \\\" <>  ToString[NumberForm[\\n        If[Length[v[[All,2]]]>2,StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\", byProductCapacity],\\n        ChartElementFunction -> \\\"Quantile\\\",\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n        ImageSize -> 15*72\\n    ]  \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_biorefinery_capacity_by_product_histogram.png\\\", #] &;\\n\\n    plot1 = ChartBiorefineriesBy[byFeedstockCapacity];\\n    plot1 \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_map_by_feedstock.png\\\", #] &;\\n    plot2 = ChartBiorefineriesBy[byProductCapacity];\\n    plot2  \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_map_by_fuel.png\\\", #] &;\\n\\n    grouped = GroupBy[results,\\n        #[\\\"Biorefinery\\\"][\\\"feedstock\\\"] &\\n    ];\\n\\n    g= KeyValueMap[\\n        {k, v} |-> \\n        ListPlot[\\n            v[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]],\\n            PlotLabel -> k,\\n            ImageSize -> 10*72\\n        ],\\n        grouped\\n    ];\\n\\n\\n    grouped = GroupBy[\\n            results,\\n            #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n            #[[All, \\\"Capacity\\\"]] &\\n        ];\\n\\n    Histogram[\\n        grouped,\\n        ChartLegends -> SwatchLegend[\\n            Keys@grouped\\n        ],\\n        Frame -> True,\\n        FrameLabel -> {\\\"Capacity (MTPD)\\\", \\\"Biorefineries\\\"},\\n        ChartStyle -> 1,\\n        PlotRange -> {All, All},\\n        ImageSize -> 10*72\\n    ] \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_capacity_histogram.png\\\", #] &;\\n\\n    byFeedstockProductCapacityCounts=Flatten[KeyValueMap[\\n        {StringRiffle[#1,\\\"-\\\"],\\n        HistogramList[\\n        #2[[All,2]],{{0,1000,2000,3000,4000,5000,10000,15000}}][[2]]}&,\\n        KeySort[byFeedstockProductCapacity]],{1}];\\n\\n    byFeedstockProductCapacityCountsSorted = SortBy[byFeedstockProductCapacityCounts, Total[#[[2]]]&];\\n    BarChart[\\n        byFeedstockProductCapacityCountsSorted[[All,2]],\\n        ChartLayout -> \\\"Stacked\\\",\\n        ChartLabels->{byFeedstockProductCapacityCountsSorted[[All,1]],None},\\n        BarOrigin->Left,\\n        Frame->True,\\n        FrameLabel->{None,\\\"Biorefinery Counts\\\"},\\n        ChartLegends->SwatchLegend[sizes[[1]],LegendLabel->\\\"Biorefinery\\\\nCapacities\\\\n(MTPD)\\\"],\\n        ImageSize->15*72\\n    ]\/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_capacity_counts.png\\\", #] &;\\n\\n    capByCost = GroupBy[\\n        results,\\n        #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n        #[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]] &\\n    ];\\n\\n    linearFits = Map[\\n        NonlinearModelFit[Select[Values@#1, #[[2]] < 30 &], a*x^(n-1), {a,n},x] &,\\n        capByCost\\n    ];\\n\\n    p1 = ListPlot[\\n        Values\/@capByCost,\\n        PlotLegends -> Automatic,\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", \\\"Biofuel Cost ($\/gallon)\\\"},\\n        LabelStyle -> 30,\\n        ImageSize -> 10*72\\n    ] ;\\n\\n    p2 = Plot[\\n            Evaluate@Table[l[x], {l, linearFits}],\\n            {x, 10, 1600},\\n            PlotStyle -> Dashed\\n        ];\\n\\n    Show@@{p1, p2}\\n\\n    \\n]\\n\\n\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/functions.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"scratch",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/scratch.wl\"",
		"children":[
			{
				"name":"data",
				"kind":"Symbol",
				"definition":"data = Import[NotebookDirectory[] <> \"data\/full_county_data.mx\"]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/scratch.wl",
					"range":{
						"start":{
							"line":3,
							"character":0
						},
						"end":{
							"line":3,
							"character":64
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[data]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"sortedData",
				"kind":"Symbol",
				"definition":"sortedData = SortBy[data, \n    row |-> Total[Map[row[#] &, feedstocks]]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/scratch.wl",
					"range":{
						"start":{
							"line":12,
							"character":0
						},
						"end":{
							"line":14,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[sortedData]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"(* ::Package:: *)\\n\\nGet[NotebookDirectory[]<>\\\"functions.wl\\\"];\\ndata = Import[NotebookDirectory[] <> \\\"data\/full_county_data.mx\\\"] (*\/\/ Select[#[\\\"StateG\\\"] == \\\"IA\\\" &]; *)\\n\\n\\nbiorefineries = Select[\\n    loadBILT[],\\n    MemberQ[{\\\"FT-SPK\\\", \\\"AtJ-SPK\\\", \\\"FT-Diesel\\\", \\\"FT-Gasoline\\\", \\\"EtOH\\\"},#[\\\"product\\\"]]\\n    &];\\n\\nfeedstocks = biorefineries[[All, \\\"feedstock\\\"]] \/\/ DeleteDuplicates;\\nsortedData = SortBy[data, \\n    row |-> Total[Map[row[#] &, feedstocks]]\\n]\\nclusters = getClusters[sortedData, 180];\\nsites = Quiet@SpatialMedian[Values@#] &\/@ clusters[[All, All, {\\\"Lat\\\", \\\"Lon\\\"}]];\\n\\n\\n\\nr = PlaceRefineries[\\n    sortedData,\\n    sites[[1;;]],\\n    filterJetFuelFirstThenByWeight,\\n    biorefineries\\n];\\n\\n(*postResults[r, \\\"jetFuelFirstThenByWeight\\\"];*)\\n\\n(*m = Select[\\n    r,\\n    #[\\\"counties\\\"][[1]][\\\"StateG\\\"] == \\\"IA\\\" &&\\n    #[\\\"Feedstock\\\"] == \\\"Corn stover\\\"\\n    &\\n]\\n\\nm[[All, \\\"Feedstock\\\"]]\\nm[[All, \\\"Product\\\"]]*)\\n\\n(*p1\\np2*)\\n\\n\\n     capByCost = GroupBy[\\n        r,\\n        #[\\\"Biorefinery\\\"][\\\"product\\\"] &,\\n        #[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]] &\\n    ];\\n    \\n        linearFits = Map[\\n        LinearModelFit[Select[Values@#1, #[[2]] < 30 &], x, x] &,\\n        capByCost\\n    ];\\n   \\n       p1 = ListPlot[\\n        Values\/@capByCost,\\n        PlotLegends -> Automatic,\\n        Frame -> True,\\n        FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", \\\"Biofuel Cost ($\/gallon)\\\"},\\n        LabelStyle -> 30,\\n        ImageSize -> 10*72\\n    ] ;\\n\\n    p2 = Plot[\\n            Evaluate@Table[l[x], {l, linearFits}],\\n            {x, 10, 1600},\\n            PlotStyle -> Dashed\\n        ];\\n        \\nShow@@{p1, p2}\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/scratch.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/scratch.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"main",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/main.wl\"",
		"children":[
			{
				"name":"data",
				"kind":"Symbol",
				"definition":"data = Import[NotebookDirectory[] <> \"data\/full_county_data.mx\"] \/\/ Select[#[\"StateG\"] == \"IA\" &]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/main.wl",
					"range":{
						"start":{
							"line":17,
							"character":0
						},
						"end":{
							"line":17,
							"character":97
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[data]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"feedstocks",
				"kind":"Symbol",
				"definition":"feedstocks = biorefineries[[All, \"feedstock\"]] \/\/ DeleteDuplicates",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/main.wl",
					"range":{
						"start":{
							"line":26,
							"character":0
						},
						"end":{
							"line":26,
							"character":66
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[feedstocks]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"g1",
				"kind":"Symbol",
				"definition":"g1 = Show@@geoPlots",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/main.wl",
					"range":{
						"start":{
							"line":57,
							"character":0
						},
						"end":{
							"line":57,
							"character":19
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[g1]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"(* ::Package:: *)\\nUsingFrontEnd@SystemOpen[\\\"hook:\/\/file\/DL2LJuzsg?p=UmVzZWFyY2gvTmF0aW9uYWwgR2V0dGluZyB0byBOZWdhdGl2ZQ==&n=tasks%20and%20milestones%2Epdf\\\"]\\n(* ::Title:: *)\\n(*Biorefinery Facility Location Analysis*)\\n(* https:\/\/docs.python-guide.org\/writing\/structure\/ *)\\n\\n\\n(* ::Subsection:: *)\\n(*Import data*)\\n\\n\\nGet[NotebookDirectory[]<>\\\"functions.wl\\\"];\\n(* SaveCountyDataGraphics[] *)\\n\\nfiles = FileNames[\\\"*.csv\\\", NotebookDirectory[] <> \\\"data\/billion_ton\\\"];\\ndb = <|StringTake[FileBaseName[#], {17,-1}] -> Import[#, \\\"CSV\\\"] &\/@ files[[1;;]]|>;\\n\\ndata = Import[NotebookDirectory[] <> \\\"data\/full_county_data.mx\\\"] \/\/ Select[#[\\\"StateG\\\"] == \\\"IA\\\" &]\\nclusters = getClusters[data, 5];\\nsites = SpatialMedian[Values@#] &\/@ clusters[[All, All, {\\\"Lat\\\", \\\"Lon\\\"}]];\\n\\nbiorefineries = Select[\\n    loadBILT[],\\n    MemberQ[{\\\"FT-SPK\\\", \\\"AtJ-SPK\\\", \\\"FT-Diesel\\\", \\\"FT-Gasoline\\\", \\\"EtOH\\\"},#[\\\"product\\\"]]\\n    &];\\n\\nfeedstocks = biorefineries[[All, \\\"feedstock\\\"]] \/\/ DeleteDuplicates\\n\\nbiomap = DeleteCases[Flatten[Table[\\n    {f, d[f], d[\\\"Graphics\\\"]},\\n    {d, data[[1;;]]}, {f, feedstocks}\\n],1], {_, _Missing, _}];\\n\\n\\ngrouped = GroupBy[\\n    biomap,\\n    #[[1]] &,\\n    Thread[Rule[#[[All, 3]], #[[All, 2]]]] &];\\n\\nbins = First@HistogramList[Select[\\n    biomap[[All, 2]], # < 50000 &], 7] ~ Join ~ {1*^6} \/\/ Rest;\\n\\ngeoPlots = MapIndexed[GeoRegionValuePlot[#1,\\n    ColorFunction -> \\\"BlueGreenYellow\\\",\\n    ColorFunctionBinning -> {bins},\\n    (* ClippingStyle -> {RGBColor[0, 0, 1, 0.05], Yellow}, *)\\n    PlotLegends -> If[#2[[1]] == 1, \\n        Placed[BarLegend[\\n            Automatic,\\n            LegendLabel -> \\\"Biomass (MT\/yr)\\\",\\n            Background -> White\\n        ], Right],\\n    None],\\n    ImageSize -> 20*72\\n] &, (Values@grouped)[[1;;]]];\\n\\n\\ng1 = Show@@geoPlots\\n\\nExport[NotebookDirectory[] <> \\\"figures\/resource_map.png\\\", g1]\\n\\n\\n(* ::Subsection:: *)\\n(*Data preparation*)\\n(* LoadCachedData[]  *)\\n\\n\\n(* ::Subsection:: *)\\n(*Load county data*)\\n\\n\\n(* ::Section:: *)\\n(*Create a list of biorefineries*)\\n\\n\\n(* county = {\\\"Year\\\", \\\"Scenario\\\", \\\"Biomass Price\\\", \\\"Resource\\\", \\\"State\\\", \\\"County\\\", \\\"USDA Region\\\", \\\"fips\\\", \\\"Production\\\", \\\"Production Unit\\\", \\\"Production Density\\\", \\\"Harvested Acres\\\", \\\"Yield\\\", \\\"Yield Unit\\\", \\\"Land Area\\\", \\\"Resource Category\\\", \\\"Resource Form\\\", \\\"Resource Type\\\", \\\"Land Source\\\", \\\"Class\\\", \\\"Section\\\", \\\"Forest Region\\\", \\\"Diameter Class\\\", \\\"Operation Type\\\", \\\"Owner\\\", \\\"supply Class\\\", \\\"Version\\\"} *)\\n    (* biorefinery = {\\\"Feedstock\\\", \\\"Unit\\\", \\\"Biorefinery\\\", \\\"Weight\\\", \\\"Yield\\\", \\\"CO2C\\\", \\\"Notes\\\"} *)\\n\\n\\n(* ::Text:: *)\\n(*For each resource, select all counties with that resource and assign biorefineries based on weighted average*)\\n\\n\\n(* ::Section:: *)\\n(*Deploy Biorefinery*)\\n\\n\\n(* ::Section:: *)\\n(*Working Area*)\\n\\n\\nGraphics[\\n\\tFlatten@MapIndexed[{ColorData[2][#2[[1]]],#1[[All,\\\"Graphics\\\"]]}&,clusters]\\n]\\n\\n\\n(* allCounties = Table[r = biorefineryCost[site, nearestSites[[1;;from]], biorefineries[[1]]]; nearestSites[[from, \\\"Biofuel Cost\\\"]] = r; nearestSites[[from]], {from, Range@Length@nearestSites}] *)\\n\\n\\n(* \\nstory = SelectFirst[data, #[\\\"State\\\"] == \\\"IA\\\" && StringContainsQ[#[\\\"County\\\"], \\\"Story\\\"] &][[{\\\"Lat\\\", \\\"Lon\\\"}]] \/\/ Values\\ncounties = Select[data, #[\\\"State\\\"] == \\\"IA\\\" &]\\nbio = SelectFirst[biorefineries, #[\\\"feedstock\\\"] == \\\"Corn stover\\\" && #[\\\"product\\\"] == \\\"EtOH\\\" &]\\n\\nr = gatherBiomass[story, counties, bio]\\n\\nr[[All, \\\"Capacity\\\"]]\\n *)\\n\\n\\n\\n(* ::Section:: *)\\n(*Section*)\\n\\n\\n(* \/\/ Export[NotebookDirectory[] <> \\\"figures\/capacity_by_cost.png\\\", #] & *)\\n\\n\\n\\ncapByCostFeedstock = GroupBy[\\n    results,\\n    #[\\\"Biorefinery\\\"][\\\"feedstock\\\"] &,\\n    #[[All, {\\\"Capacity\\\", \\\"Biofuel Cost\\\"}]] &\\n];\\n\\n\\nListPlot[\\n    Values\/@capByCostFeedstock,\\n    Frame -> True,\\n    FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", \\\"Biofuel Cost ($\/gallon)\\\"},\\n    LabelStyle -> 30,\\n    ImageSize -> 10*72\\n] \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_capacity_by_cost_feedstock.png\\\", #] &;\\n]\\n\\n\\nresults1 = PlaceRefineries[data, sites[[1;;]], filterBySmallestCost, biorefineries, 10000];\\n\\npostResults[results1, \\\"smallest_cost\\\"];\\n\\nresults2 = PlaceRefineries[data, sites[[1;;]], filterByFeedstockWeight, biorefineries, 10000];\\n\\npostResults[results2, \\\"feedstock_weight\\\"];\\n\\n\\nresults3 = PlaceRefineries[data[[1;;]], sites[[1;;]], filterByFeedstockWeight, biorefineries, 10000];\\n\\n\\npostResults[results3, \\\"testing_cost\\\"];\\n\\n\\nBarChart[\\n    GroupBy[\\n        feedstockByWeight,\\n        #[\\\"Feedstock\\\"] &,\\n        Rest[First@Values@#] &],\\n    ChartLayout -> \\\"Stacked\\\",\\n    BarOrigin -> Left,\\n    LabelingFunction -> (Placed[If[# >0, NumberForm[#, {2,1}],\\\"\\\"], Center] &),\\n    ChartLabels -> {feedstockByWeight[[All, \\\"Feedstock\\\"]], Automatic},\\n    ChartLegends -> (SwatchLegend[\\n        Rest@Keys[feedstockByWeight[[1]]],\\n        LabelStyle -> 30]),\\n    Frame -> True,\\n    FrameLabel -> {None, \\\"Biorefinery Probability\\\"},\\n    ImageSize -> 15*72\\n] \\n\\n(* \/\/ Export[NotebookDirectory[] <> \\\"figures\/feedstock_weight_histogram.png\\\", #] & *)\\n\\nGroupBy[\\n        feedstockByWeight,\\n        #[\\\"Feedstock\\\"] &,\\n        Rest[First@Values@#] &]\\n\\nfeedstockByWeight[[1]]\\n\\n\\nDistributionChart[\\n    byFeedstockCapacity[[All, All, 2]],\\n    BarOrigin -> Left,\\n    ChartLabels -> KeyValueMap[{k,v} |-> k <> \\\" (\\\" <> ToString[NumberForm[Mean[v[[All, 2]]], {2,1}]] <> \\\"\\\\[PlusMinus] \\\" <>  ToString[NumberForm[Check[StandardDeviation[v[[All, 2]]],0], {2,1}]] <> \\\")\\\", byFeedstockCapacity],\\n    Frame -> True,\\n    FrameLabel -> {\\\"Biorefinery Capacity (MTPD)\\\", None},\\n    ImageSize -> 15*72\\n] \/\/ Export[NotebookDirectory[] <> \\\"figures\/\\\" <> label <> \\\"_biorefinery_capacity_by_feedstock_histogram.png\\\", #] &;\\n\\n\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/main.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/main.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"Crop%20versus%20CSR%20model",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl\"",
		"children":[
			{
				"name":"csr",
				"kind":"Symbol",
				"definition":"csr = Import[\"\/Users\/mark\/Downloads\/billionton_county_download20211119-044647.csv\/CSR.xlsx\",{\"Data\", 1}]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl",
					"range":{
						"start":{
							"line":4,
							"character":0
						},
						"end":{
							"line":4,
							"character":104
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[csr]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"resources",
				"kind":"Symbol",
				"definition":"resources = DeleteDuplicates[billionTon[[All,\"Resource\"]]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl",
					"range":{
						"start":{
							"line":12,
							"character":0
						},
						"end":{
							"line":12,
							"character":58
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[resources]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"f",
				"kind":"Symbol",
				"definition":"f[r_]:=Join[r,<| \"CSR\"->First[Select[csr, #[[1]]<> \" County\"==r[[\"County\"]] &],{0,0}][[2]]|>]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl",
					"range":{
						"start":{
							"line":22,
							"character":0
						},
						"end":{
							"line":22,
							"character":93
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[f]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"g",
				"kind":"Symbol",
				"definition":"g[r_]:=Module[{x,y,data},\ndata =Select[iowaBillionTonCSR, #[\"Resource\"]==r&];\nx = data[[All,\"CSR\"]];\ny = data[[All, \"Yield\"]];\nIf[Length@data>1,\nr-><|\"data\"->Transpose@{x,y},\"unit\"->data[[1,\"Yield Unit\"]]|>\n]\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl",
					"range":{
						"start":{
							"line":27,
							"character":0
						},
						"end":{
							"line":34,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[g]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"fits",
				"kind":"Symbol",
				"definition":"fits = {LinearModelFit[#[\"data\"],x, x],#[\"unit\"]}&\/@pairedData",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl",
					"range":{
						"start":{
							"line":40,
							"character":0
						},
						"end":{
							"line":40,
							"character":62
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[fits]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"r",
				"kind":"Symbol",
				"definition":"r = \"Wheat\"",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl",
					"range":{
						"start":{
							"line":75,
							"character":0
						},
						"end":{
							"line":75,
							"character":11
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[r]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"csr={{\\\"Linn\\\",68.1`},{\\\"Sioux\\\",85.3`},{\\\"Polk\\\",70.7`},{\\\"Tama\\\",70.3`},{\\\"Sac\\\",82.8`},{\\\"Clay\\\",79.9`},{\\\"Cass\\\",69.5`},{\\\"Lyon\\\",75.1`},{\\\"Lee\\\",52.3`},{\\\"Kossuth\\\",78.2`},{\\\"Iowa\\\",62.5`},{\\\"Jasper\\\",68.5`},{\\\"Page\\\",70.6`},{\\\"Story\\\",80.2`},{\\\"Adair\\\",64},{\\\"Clayton\\\",43.9`},{\\\"Jones\\\",62.2`},{\\\"Ida\\\",77.1`},{\\\"Cedar\\\",76.9`},{\\\"Fayette\\\",68.2`},{\\\"Clinton\\\",63},{\\\"Benton\\\",78.9`},{\\\"Dallas\\\",76.6`},{\\\"Butler\\\",74.6`},{\\\"Davis\\\",46.7`},{\\\"Floyd\\\",79.5`},{\\\"Scott\\\",72.4`},{\\\"Mills\\\",71.8`},{\\\"Plymouth\\\",73.5`},{\\\"Boone\\\",75.5`},{\\\"Shelby\\\",69.6`},{\\\"Taylor\\\",58.5`},{\\\"Carroll\\\",76.5`},{\\\"Webster\\\",75.1`},{\\\"Wright\\\",78.6`},{\\\"Hardin\\\",79.5`},{\\\"Jackson\\\",44},{\\\"Obrien\\\",91.4`},{\\\"Woodbury\\\",61.4`},{\\\"Monona\\\",59.1`},{\\\"Harrison\\\",61.2`},{\\\"Lucas\\\",43.8`},{\\\"Keokuk\\\",63},{\\\"Greene\\\",78.3`},{\\\"Guthrie\\\",61.4`},{\\\"Crawford\\\",68.6`},{\\\"Marion\\\",59.7`},{\\\"Warren\\\",57.3`},{\\\"Wayne\\\",50.7`},{\\\"Johnson\\\",65},{\\\"Franklin\\\",79.4`},{\\\"Henry\\\",63.8`},{\\\"Union\\\",63.2`},{\\\"Calhoun\\\",82.2`},{\\\"Clarke\\\",47.2`},{\\\"Hancock\\\",74.6`},{\\\"Decatur\\\",40.1`},{\\\"Grundy\\\",86.9`},{\\\"Dubuque\\\",49.2`},{\\\"Louisa\\\",63.7`},{\\\"Marshall\\\",75.7`},{\\\"Pottawattamie\\\",68.4`},{\\\"Madison\\\",60.8`},{\\\"Mahaska\\\",68.2`},{\\\"Palo Alto\\\",77},{\\\"Worth\\\",73.8`},{\\\"Allamakee\\\",40.8`},{\\\"Hamilton\\\",79.1`},{\\\"Adams\\\",61.1`},{\\\"Ringgold\\\",50.2`},{\\\"Cherokee\\\",82.2`},{\\\"Delaware\\\",65.1`},{\\\"Fremont\\\",72.1`},{\\\"Howard\\\",76.9`},{\\\"Bremer\\\",75.5`},{\\\"Winneshiek\\\",59.2`},{\\\"Buchanan\\\",75.8`},{\\\"Mitchell\\\",80.9`},{\\\"Emmet\\\",77.2`},{\\\"Poweshiek\\\",67.9`},{\\\"Monroe\\\",48.3`},{\\\"Wapello\\\",56.6`},{\\\"Osceola\\\",86.3`},{\\\"Pocahontas\\\",81.2`},{\\\"Black Hawk\\\",73.9`},{\\\"Buena Vista\\\",83.4`},{\\\"Chickasaw\\\",77.2`},{\\\"Jefferson\\\",61},{\\\"Audubon\\\",69.3`},{\\\"Washington\\\",68},{\\\"Van Buren\\\",49},{\\\"Cerro Gordo\\\",74.6`},{\\\"Appanoose\\\",46.7`},{\\\"Humboldt\\\",80.3`},{\\\"Dickinson\\\",79.9`},{\\\"Winnebago\\\",72.9`},{\\\"Muscatine\\\",64.9`},{\\\"Des Moines\\\",67},{\\\"Montgomery\\\",70.3`}};\\n\\n\\n\\ncsr = Import[\\\"\/Users\/mark\/Downloads\/billionton_county_download20211119-044647.csv\/CSR.xlsx\\\",{\\\"Data\\\", 1}]\\n\\n\\n\\nbillionTon =SemanticImport[\\\"\/Users\/mark\/Downloads\/billionton_county_download20211119-044647.csv\/billionton_county_download20211119-044647.csv\\\",{\\\"Integer\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"Integer\\\",\\\"String\\\",\\\"Real\\\",\\\"Integer\\\",\\\"Real\\\",\\\"String\\\",\\\"Real\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\",\\\"String\\\"},\\\"NamedRows\\\"];\\n\\n\\n\\nresources = DeleteDuplicates[billionTon[[All,\\\"Resource\\\"]]]\\n\\n\\n\\niowaBillionTon = Select[billionTon, #[[\\\"State\\\"]]==\\\"Iowa\\\"&];\\n\\n\\n\\nClearAll[f]\\nSetAttributes[f,HoldAll]\\nf[r_]:=Join[r,<| \\\"CSR\\\"->First[Select[csr, #[[1]]<> \\\" County\\\"==r[[\\\"County\\\"]] &],{0,0}][[2]]|>]\\niowaBillionTonCSR=Map[f,iowaBillionTon];\\n\\n\\n\\ng[r_]:=Module[{x,y,data},\\ndata =Select[iowaBillionTonCSR, #[\\\"Resource\\\"]==r&];\\nx = data[[All,\\\"CSR\\\"]];\\ny = data[[All, \\\"Yield\\\"]];\\nIf[Length@data>1,\\nr-><|\\\"data\\\"->Transpose@{x,y},\\\"unit\\\"->data[[1,\\\"Yield Unit\\\"]]|>\\n]\\n]\\n\\npairedData=Association[DeleteCases[g\/@resources[[1;;9]],Null]];\\n\\n\\n\\nfits = {LinearModelFit[#[\\\"data\\\"],x, x],#[\\\"unit\\\"]}&\/@pairedData\\n\\n\\n\\nfitPlots = Association@KeyValueMap[#1->Plot[#2[[1]][x],{x,10,100}, \\nEpilog->Text[#2[[1]][\\\"BestFit\\\"],Scaled[{0.3,0.9}]],\\nPlotRange->{{0,100},All},\\nPlotLabel->#1,\\nFrame->True,\\nFrameLabel->{\\\"CSR\\\",#1<> \\\" Yield\\\\n(\\\" <> #2[[2]]<>\\\")\\\"},\\nImageSize->10*72\\n]&,fits];\\n\\n\\n\\ngraphs = Map[\\nListPlot[\\n#1[[1]],\\nImageSize->10*72\\n]&,pairedData];\\n\\n\\n\\nMapThread[Show,{fitPlots,graphs}]\/\/Values\/\/Partition[#,2]&\/\/Grid\\n\\n\\n\\nresources\\n\\n\\n\\notherResources={\\\"Wheat\\\",\\\"Sorghum\\\",\\\"Cotton\\\",\\\"Rice\\\",\\\"Barley\\\"} ;\\n\\n\\n\\nr = \\\"Wheat\\\"\\nyields=Select[billionTon,#[\\\"Resource\\\"]==r&][[All,\\\"Yield\\\"]];\\nHistogram[data[[All,\\\"Yield\\\"]]]\\n\\n\\n\\nQuantile[yields,{0.05,0.95}]\\n\\n\\n\\nQuantile[pairedData[\\\"Hay\\\"][\\\"data\\\"][[All,2]],{0.05,0.95}]\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/data\/billionton_county_download20211119-044647.csv\/Crop%20versus%20CSR%20model.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"bilt",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/bilt.wl\"",
		"children":[
			{
				"name":"headers",
				"kind":"Symbol",
				"definition":"headers = bilt[[2, 7;;]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/bilt.wl",
					"range":{
						"start":{
							"line":2,
							"character":0
						},
						"end":{
							"line":2,
							"character":24
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[headers]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"values",
				"kind":"Symbol",
				"definition":"values = bilt[[4;;, 7;;]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/bilt.wl",
					"range":{
						"start":{
							"line":3,
							"character":0
						},
						"end":{
							"line":3,
							"character":25
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[values]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"bilt = Import[NotebookDirectory[] <> \\\"Example BILT biomass allocation calculation_220316.xlsx\\\", \\\"XLSX\\\"][[1]];\\n\\nheaders = bilt[[2, 7;;]]\\nvalues = bilt[[4;;, 7;;]]\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/bilt.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/bilt.wl"
		},
		"collapsibleState":1
	},
	{
		"name":"optimization",
		"kind":"String",
		"definition":"\"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/optimization.wl\"",
		"children":[
			{
				"name":"dist",
				"kind":"Symbol",
				"definition":"dist[f_, t_]:=EuclideanDistance[Values@iowaData[[f, {\"Lat\", \"Lon\"}]], Values@iowaData[[t, {\"Lat\", \"Lon\"}]]]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/optimization.wl",
					"range":{
						"start":{
							"line":0,
							"character":0
						},
						"end":{
							"line":0,
							"character":107
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[dist]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"vars",
				"kind":"Symbol",
				"definition":"vars = Flatten[\n    {\n        Element[biomass, Matrices[{5,5}, Reals]],\n        Element[locs, Vectors[5, Integers]]\n    }\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/optimization.wl",
					"range":{
						"start":{
							"line":2,
							"character":0
						},
						"end":{
							"line":7,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[vars]",
				"icon":"symbol-variable",
				"collapsibleState":1
			},
			{
				"name":"r",
				"kind":"Symbol",
				"definition":"r = NMinimize[\n    {\n        Total@Flatten@Table[\n            Indexed[locs, t]*Indexed[biomass, {f, t}]*dist[f, t],\n            {f, 5}, {t, 5}],\n        VectorLessEqual[{locs, 1}],\n        VectorLessEqual[{0, locs}],\n        Total[Table[Indexed[locs, t], {t, 5}]] == 1,\n        Table[0 <= Indexed[biomass, {f, t}], {f, 5}, {t, 5}],\n        Table[720000 <= Total[Flatten@Table[Indexed[locs, t]*Indexed[biomass, {f, t}], {f, 5}]], {t, 5}],\n        VectorLessEqual[{biomass, 100000}],\n        VectorLessEqual[{0, biomass}]\n    },\n    vars,\n    Method -> \"NelderMead\"\n]",
				"location":{
					"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/optimization.wl",
					"range":{
						"start":{
							"line":9,
							"character":0
						},
						"end":{
							"line":24,
							"character":1
						}
					}
				},
				"children":[],
				"lazyload":"symbolToTreeItem2[r]",
				"icon":"symbol-variable",
				"collapsibleState":1
			}
		],
		"lazyload":"Map[symbolToTreeItem2, getSymbols[\"dist[f_, t_]:=EuclideanDistance[Values@iowaData[[f, {\\\"Lat\\\", \\\"Lon\\\"}]], Values@iowaData[[t, {\\\"Lat\\\", \\\"Lon\\\"}]]]\\n\\nvars = Flatten[\\n    {\\n        Element[biomass, Matrices[{5,5}, Reals]],\\n        Element[locs, Vectors[5, Integers]]\\n    }\\n]\\n\\nr = NMinimize[\\n    {\\n        Total@Flatten@Table[\\n            Indexed[locs, t]*Indexed[biomass, {f, t}]*dist[f, t],\\n            {f, 5}, {t, 5}],\\n        VectorLessEqual[{locs, 1}],\\n        VectorLessEqual[{0, locs}],\\n        Total[Table[Indexed[locs, t], {t, 5}]] == 1,\\n        Table[0 <= Indexed[biomass, {f, t}], {f, 5}, {t, 5}],\\n        Table[720000 <= Total[Flatten@Table[Indexed[locs, t]*Indexed[biomass, {f, t}], {f, 5}]], {t, 5}],\\n        VectorLessEqual[{biomass, 100000}],\\n        VectorLessEqual[{0, biomass}]\\n    },\\n    vars,\\n    Method -> \\\"NelderMead\\\"\\n]\\n\", \"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/optimization.wl\"]]",
		"icon":"file-code",
		"location":{
			"uri":"file:\/\/\/Users\/mark\/Library\/CloudStorage\/OneDrive-IowaStateUniversity\/Dropbox\/Research\/National%20Getting%20to%20Negative\/optimization.wl"
		},
		"collapsibleState":1
	}
]